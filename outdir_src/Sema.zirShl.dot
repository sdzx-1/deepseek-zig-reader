
digraph flowchart {
    node [fontname="Helvetica", shape=rect, style=rounded];
    edge [fontname="Helvetica"];

    start [label="开始: zirShl函数入口"];
    resolve_operands [label="解析操作数\n(extra.lhs/rhs)"];
    get_src_locations [label="获取源代码位置\n(lhs_src/rhs_src)"];
    check_vectorizable [label="检查向量化操作数"];
    scalar_types [label="提取标量类型\n(scalar_ty/scalar_rhs_ty)"];
    check_rhs_comptime_int [label="检查右操作数是否为comptime_int"];
    resolve_values [label="解析左右操作数值\n(maybe_lhs_val/maybe_rhs_val)"];
    rhs_undef_check [label="右值为undef?"];
    rhs_zero_check [label="右值为0?"];
    check_shift_amount [label="检查移位量是否超限"];
    check_negative_shift [label="检查负移位量"];
    handle_lhs_comptime [label="左值为编译时常量?\n处理位移计算"];
    handle_rhs_sat [label="饱和左移时限制rhs类型"];
    runtime_safety_checks [label="生成运行时安全检查"];
    generate_air_inst [label="生成最终Air指令"];
    error_path [label="报错路径", shape=diamond];

    start -> resolve_operands;
    resolve_operands -> get_src_locations;
    get_src_locations -> check_vectorizable;
    check_vectorizable -> scalar_types;
    scalar_types -> check_rhs_comptime_int;
    check_rhs_comptime_int -> resolve_values;
    
    resolve_values -> rhs_undef_check;
    rhs_undef_check -> rhs_zero_check [label="No"];
    rhs_undef_check -> return_undef [label="Yes"];
    
    rhs_zero_check -> return_lhs [label="Yes"];
    rhs_zero_check -> check_shift_amount [label="No"];
    
    check_shift_amount -> check_negative_shift;
    check_negative_shift -> error_path [label="存在错误"];
    check_negative_shift -> handle_lhs_comptime [label="无错误"];
    
    handle_lhs_comptime -> handle_rhs_sat [label="非编译时常量"];
    handle_lhs_comptime -> generate_air_inst [label="编译时常量"];
    
    handle_rhs_sat -> runtime_safety_checks;
    runtime_safety_checks -> generate_air_inst;
    
    error_path -> generate_air_inst [label="错误处理完成"];
    
    // 隐藏节点用于对齐
    return_undef [label="返回undef", shape=plain];
    return_lhs [label="直接返回lhs", shape=plain];
    return_undef -> generate_air_inst [style=invis];
    return_lhs -> generate_air_inst [style=invis];
    
    // 分支连接
    {rank=same; return_undef; return_lhs;}
}
