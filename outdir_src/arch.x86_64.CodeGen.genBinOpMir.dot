
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Helvetica"];
    edge [fontname="Helvetica"];

    start [label="开始 genBinOpMir"];
    get_pt_zcu [label="获取 pt 和 zcu"];
    compute_abi_size [label="计算 abi_size = ty.abiSize(zcu)"];
    spill_eflags [label="尝试 spillEflagsIfOccupied"];
    switch_dst_mcv [label="switch (dst_mcv)"];

    handle_registers [label="处理 .register 及其变体"];
    check_register_type [label="检查 dst_mcv 类型"];
    loop_registers [label="遍历每个目标寄存器"];
    handle_mir_limb_tag [label="确定 mir_limb_tag"];
    switch_src_mcv [label="switch (src_mcv)"];

    handle_memory [label="处理 .memory 及相关加载操作"];
    compute_limb_abi_size [label="计算 limb_abi_size = min(abi_size, 8)"];
    handle_dst_info [label="处理 dst_info (地址寄存器分配)"];
    handle_src_info [label="处理 src_info (地址寄存器分配)"];
    loop_limbs [label="循环处理每个 limb (off < abi_size)"];
    determine_mir_limb_tag [label="确定当前 limb 的 mir_limb_tag"];
    process_src_limb [label="处理 src_limb_mcv"];

    end [label="结束"];

    start -> get_pt_zcu;
    get_pt_zcu -> compute_abi_size;
    compute_abi_size -> spill_eflags;
    spill_eflags -> switch_dst_mcv;

    switch_dst_mcv -> handle_registers [label=".register 及其变体"];
    switch_dst_mcv -> handle_memory [label=".memory 及相关加载操作"];

    handle_registers -> check_register_type;
    check_register_type -> loop_registers;
    loop_registers -> handle_mir_limb_tag;
    handle_mir_limb_tag -> switch_src_mcv;

    switch_src_mcv -> handle_register [label=".register 变体"];
    switch_src_mcv -> handle_immediate [label=".immediate"];
    switch_src_mcv -> handle_air_ref [label=".air_ref (递归调用)"];
    switch_src_mcv -> handle_memory_ops [label="内存相关操作"];

    handle_memory -> compute_limb_abi_size;
    compute_limb_abi_size -> handle_dst_info;
    handle_dst_info -> handle_src_info;
    handle_src_info -> loop_limbs;
    loop_limbs -> determine_mir_limb_tag;
    determine_mir_limb_tag -> process_src_limb;
    process_src_limb -> loop_limbs [label="继续下一个 limb"];

    handle_register -> end;
    handle_immediate -> end;
    handle_air_ref -> end;
    handle_memory_ops -> end;
    loop_limbs -> end [label="所有 limb 处理完成"];
}
