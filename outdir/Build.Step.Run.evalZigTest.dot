
digraph evalZigTest {
    node [shape=rectangle, fontname="Arial"];
    edge [fontname="Arial"];

    start [label="开始", shape=ellipse];
    init_vars [label="初始化变量：gpa, arena, poller"];
    check_fuzz_context [label="检查 fuzz_context 是否存在？", shape=diamond];
    send_fuzz_start [label="发送 start_fuzging 消息"];
    send_query_metadata [label="发送 query_test_metadata 消息"];
    handle_first_write_failed [label="设置 first_write_failed 标志", shape=diamond];
    prepare_polling [label="准备轮询 stdout/stderr"];
    loop_start [label="轮询循环开始"];
    check_header [label="检查消息头是否完整？", shape=diamond];
    read_header [label="读取消息头"];
    switch_header [label="根据 header.tag 分支", shape=diamond];
    handle_zig_version [label="验证 Zig 版本一致性"];
    handle_test_metadata [label="解析测试元数据\n设置进度节点\n请求下一个测试"];
    handle_test_results [label="统计测试结果\n记录错误信息\n请求下一个测试"];
    handle_coverage_id [label="处理覆盖率 ID\n通知 Web 服务器"];
    handle_fuzz_start_addr [label="处理模糊测试入口地址\n通知 Web 服务器"];
    other_messages [label="忽略其他消息类型"];
    check_write_failed [label="any_write_failed = ?", shape=diamond];
    capture_stderr [label="捕获剩余 stderr 内容"];
    close_stdin [label="关闭子进程 stdin"];
    return_results [label="返回测试结果结构体"];
    end [label="结束", shape=ellipse];

    start -> init_vars;
    init_vars -> check_fuzz_context;
    
    check_fuzz_context -> send_fuzz_start [label="存在"];
    check_fuzz_context -> send_query_metadata [label="不存在"];
    
    send_fuzz_start -> handle_first_write_failed;
    send_query_metadata -> handle_first_write_failed;
    
    handle_first_write_failed -> prepare_polling [label="first_write_failed=false"];
    handle_first_write_failed -> capture_stderr [label="first_write_failed=true"];
    
    prepare_polling -> loop_start;
    
    loop_start -> check_header;
    check_header -> read_header [label="有足够数据"];
    check_header -> check_write_failed [label="轮询失败"];
    
    read_header -> switch_header;
    
    switch_header -> handle_zig_version [label=".zig_version"];
    switch_header -> handle_test_metadata [label=".test_metadata"];
    switch_header -> handle_test_results [label=".test_results"];
    switch_header -> handle_coverage_id [label=".coverage_id"];
    switch_header -> handle_fuzz_start_addr [label=".fuzz_start_addr"];
    switch_header -> other_messages [label="其他"];
    
    handle_zig_version -> loop_start;
    handle_test_metadata -> loop_start;
    handle_test_results -> loop_start;
    handle_coverage_id -> loop_start;
    handle_fuzz_start_addr -> loop_start;
    other_messages -> loop_start;
    
    check_write_failed -> capture_stderr [label="true"];
    check_write_failed -> loop_start [label="false"];
    
    capture_stderr -> close_stdin;
    close_stdin -> return_results;
    return_results -> end;
}
