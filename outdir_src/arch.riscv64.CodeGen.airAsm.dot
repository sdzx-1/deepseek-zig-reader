
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];
    rankdir=TB;

    start [label="开始 airAsm 函数"];
    init_vars [label="初始化变量\nty_pl, extra, clobbers_len, extra_i"];
    parse_outputs [label="解析 outputs\n从 AIR extra 数据"];
    parse_inputs [label="解析 inputs\n从 AIR extra 数据"];
    prepare_args [label="初始化 args 列表和 arg_map"];
    process_outputs_loop [label="处理 outputs 循环"];
    output_constraint_check [label="检查约束类型\n'=', '+' 或无效", shape=diamond];
    handle_readwrite [label="处理读写约束\n检查输出有效性"];
    resolve_arg_mcv [label="解析参数 MCValue\n寄存器/内存/立即数"];
    lock_registers [label="锁定相关寄存器"];
    process_inputs_loop [label="处理 inputs 循环"];
    input_constraint_check [label="检查输入约束\n'X', 寄存器或无效", shape=diamond];
    resolve_input_mcv [label="解析输入 MCValue\n寄存器复制或直接使用"];
    process_clobbers [label="处理 clobbers\n锁定指定寄存器"];
    parse_asm_source [label="解析汇编源代码"];
    handle_labels [label="处理标签定义和引用"];
    process_instructions [label="处理指令\nMnemonic/Pseudo"];
    check_instruction_type [label="指令类型检查", shape=diamond];
    gen_mnemonic [label="生成机器指令"];
    gen_pseudo [label="处理伪指令\n.li, .mv, .tail 等"];
    undefined_labels_check [label="检查未定义标签", shape=diamond];
    store_results [label="存储结果到输出"];
    finish_air [label="完成 AIR 指令\n调用 finishAir/finishAirResult"];
    error_exit [label="错误处理\n返回 fail", shape=hexagon];

    start -> init_vars;
    init_vars -> parse_outputs;
    parse_outputs -> parse_inputs;
    parse_inputs -> prepare_args;
    prepare_args -> process_outputs_loop;

    process_outputs_loop -> output_constraint_check;
    output_constraint_check -> handle_readwrite [label="约束为'+'"];
    output_constraint_check -> resolve_arg_mcv [label="约束为'='"];
    output_constraint_check -> error_exit [label="无效约束"];
    handle_readwrite -> resolve_arg_mcv;
    resolve_arg_mcv -> lock_registers;
    lock_registers -> process_outputs_loop [label="循环处理"];

    process_outputs_loop -> process_inputs_loop [label="循环结束"];
    process_inputs_loop -> input_constraint_check;
    input_constraint_check -> resolve_input_mcv [label="有效约束"];
    input_constraint_check -> error_exit [label="无效约束"];
    resolve_input_mcv -> lock_registers;
    lock_registers -> process_inputs_loop [label="循环处理"];

    process_inputs_loop -> process_clobbers [label="循环结束"];
    process_clobbers -> parse_asm_source;
    parse_asm_source -> handle_labels;
    handle_labels -> process_instructions;

    process_instructions -> check_instruction_type;
    check_instruction_type -> gen_mnemonic [label="Mnemonic"];
    check_instruction_type -> gen_pseudo [label="Pseudo"];
    gen_mnemonic -> undefined_labels_check;
    gen_pseudo -> undefined_labels_check;

    undefined_labels_check -> error_exit [label="存在未定义标签"];
    undefined_labels_check -> store_results [label="无未定义标签"];
    store_results -> finish_air;
    finish_air -> end;

    error_exit -> end [style="dashed"];

    end [label="结束", shape=doublecircle];
}
