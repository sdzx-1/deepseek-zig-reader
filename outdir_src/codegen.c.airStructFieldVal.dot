
digraph flowchart {
    node [fontname="Helvetica", shape=rect, style=rounded];
    edge [fontname="Helvetica"];
    graph [nodesep=0.5, ranksep=0.5];

    start [label="开始 airStructFieldVal"];
    check_runtime_bits [label="inst_ty 是否有运行时位？", shape=diamond];
    reap_and_return_none [label="回收操作数\n返回 .none"];
    resolve_struct_operand [label="解析 struct_operand\n回收操作数"];
    get_struct_ty [label="获取 struct_ty"];
    ensure_ctype_visible [label="确保结构体类型定义可见"];
    switch_struct_key [label="根据 struct_ty 类型分支", shape=diamond];

    // struct_type 分支
    struct_type_branch [label="struct_type 分支"];
    check_struct_layout [label="结构体布局类型？", shape=diamond];
    auto_extern_case [label="auto/extern 布局\n处理字段名"];
    packed_case [label="packed 布局\n计算位偏移\n生成临时变量"];
    cast_check [label="是否需要类型转换？", shape=diamond];
    memcpy_conversion [label="memcpy 类型转换"];
    free_temp_local [label="释放临时变量"];
    return_temp [label="返回 temp_local"];

    // tuple_type 分支
    tuple_type_branch [label="tuple_type 分支\n直接使用字段索引"];

    // union_type 分支
    union_type_branch [label="union_type 分支"];
    check_union_layout [label="联合体布局类型？", shape=diamond];
    auto_extern_union [label="auto/extern 布局\n处理标签/字段名"];
    packed_union_case [label="packed 布局\n内存拷贝操作"];

    // 公共结束流程
    alloc_local [label="分配本地变量"];
    assignment_sequence [label="生成赋值操作序列"];
    return_local [label="返回 local"];

    // 流程连接
    start -> check_runtime_bits;
    check_runtime_bits -> reap_and_return_none [label="否"];
    check_runtime_bits -> resolve_struct_operand [label="是"];
    resolve_struct_operand -> get_struct_ty -> ensure_ctype_visible -> switch_struct_key;

    switch_struct_key -> struct_type_branch [label="struct_type"];
    struct_type_branch -> check_struct_layout;
    check_struct_layout -> auto_extern_case [label="auto/extern"];
    check_struct_layout -> packed_case [label="packed"];
    
    packed_case -> cast_check;
    cast_check -> return_temp [label="类型相同"];
    cast_check -> memcpy_conversion [label="需要转换"];
    memcpy_conversion -> free_temp_local -> return_local;

    switch_struct_key -> tuple_type_branch [label="tuple_type"];
    tuple_type_branch -> alloc_local;

    switch_struct_key -> union_type_branch [label="union_type"];
    union_type_branch -> check_union_layout;
    check_union_layout -> auto_extern_union [label="auto/extern"];
    check_union_layout -> packed_union_case [label="packed"];
    packed_union_case -> return_local;

    auto_extern_case -> alloc_local;
    auto_extern_union -> alloc_local;
    
    alloc_local -> assignment_sequence -> return_local;
}
