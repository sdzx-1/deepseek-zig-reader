
digraph linkWithLLD {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    start [label="开始"];
    end [label="结束"];
    check_lld [label="检查是否启用LLD链接器"];
    setup [label="初始设置：获取编译器、目录、输出路径"];
    module_obj [label="判断是否有Zig代码需要编译"];
    flush_module [label="生成模块对象文件"];
    sub_prog [label="创建子进度节点"];
    cache_check [label="初始化缓存和哈希摘要"];
    hash_inputs [label="哈希处理输入文件、参数等"];
    prev_digest [label="读取之前的哈希摘要"];
    digest_match [label="哈希是否匹配？"];
    skip_link [label="跳过链接，释放锁，返回"];
    delete_symlink [label="删除旧的哈希摘要文件"];
    check_output_mode [label="检查输出模式是否为Obj且满足BPF等条件"];
    copy_file [label="复制对象文件到输出路径"];
    build_argv [label="构建LLD命令行参数"];
    spawn_lld [label="调用LLD进行链接"];
    update_cache [label="更新缓存摘要和清单"];
    handle_errors [label="处理缓存写入错误"];

    start -> check_lld;
    check_lld -> setup;
    setup -> module_obj;
    module_obj -> flush_module [label="有Zig代码"];
    module_obj -> sub_prog [label="无Zig代码"];
    flush_module -> sub_prog;
    sub_prog -> cache_check [label="禁用缓存？"];
    cache_check -> hash_inputs [label="否"];
    hash_inputs -> prev_digest;
    prev_digest -> digest_match;
    digest_match -> skip_link [label="是"];
    digest_match -> delete_symlink [label="否"];
    delete_symlink -> check_output_mode;
    check_output_mode -> copy_file [label="条件满足"];
    check_output_mode -> build_argv [label="条件不满足"];
    copy_file -> update_cache;
    build_argv -> spawn_lld;
    spawn_lld -> update_cache;
    update_cache -> handle_errors;
    handle_errors -> end;
    skip_link -> end;
}
