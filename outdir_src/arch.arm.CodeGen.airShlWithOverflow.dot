
digraph flowchart {
    node [shape=rectangle, fontname="Courier", fontsize=10];
    edge [fontname="Courier", fontsize=10];

    start [label="开始 airShlWithOverflow"];
    check_unused [label="检查指令是否未使用 (liveness.isUnused)"];
    return_dead [label="标记为 dead\nfinishAir 返回"];
    get_types [label="获取类型信息\n(ty_pl, extra, lhs_ty, rhs_ty)"];
    handle_vector [label="向量类型未实现\n返回错误"];
    handle_int [label="处理整数类型\n获取 int_info"];
    check_bits [label="int_info.bits <= 32?"];
    alloc_mem [label="分配栈内存\n(stack_offset)"];
    spill_flags [label="溢出比较标志位\n(spillCompareFlagsIfOccupied)"];
    check_rhs_immediate [label="rhs 是立即数?"];
    reg_alloc_imm [label="分配寄存器\n(lhs_reg, dest_reg, reconstructed_reg)"];
    gen_lsl_imm [label="生成 LSL 指令\n(立即数移位)"];
    truncate_reg [label="截断寄存器\ntruncRegister"];
    gen_shr_imm [label="生成 ASR/LSR 指令\n(立即数移位)"];
    reg_alloc_reg [label="分配寄存器\n(lhs_reg, rhs_reg, dest_reg, reconstructed_reg)"];
    gen_lsl_reg [label="生成 LSL 指令\n(寄存器移位)"];
    gen_shr_reg [label="生成 ASR/LSR 指令\n(寄存器移位)"];
    compare [label="生成 CMP 指令\n比较 lhs 和 reconstructed_reg"];
    set_stack [label="存储结果到栈\n(genSetStack)"];
    set_overflow [label="设置溢出标志位到栈"];
    result_stack [label="返回 MCValue.stack_offset"];
    handle_large_int [label="整数 >32 位未实现\n返回错误"];
    end [label="finishAir 并返回结果"];

    start -> check_unused;
    check_unused -> return_dead [label="是"];
    check_unused -> get_types [label="否"];
    get_types -> handle_vector [label="类型是 vector"];
    get_types -> handle_int [label="类型是 int"];
    handle_vector -> end [label="直接返回错误"];
    handle_int -> check_bits;
    check_bits -> handle_large_int [label="否"];
    check_bits -> alloc_mem [label="是"];
    alloc_mem -> spill_flags;
    spill_flags -> check_rhs_immediate;
    check_rhs_immediate -> reg_alloc_imm [label="是"];
    check_rhs_immediate -> reg_alloc_reg [label="否"];
    reg_alloc_imm -> gen_lsl_imm;
    gen_lsl_imm -> truncate_reg;
    truncate_reg -> gen_shr_imm;
    gen_shr_imm -> compare;
    reg_alloc_reg -> gen_lsl_reg;
    gen_lsl_reg -> truncate_reg;
    truncate_reg -> gen_shr_reg;
    gen_shr_reg -> compare;
    compare -> set_stack;
    set_stack -> set_overflow;
    set_overflow -> result_stack;
    result_stack -> end;
    handle_large_int -> end [label="直接返回错误"];
    return_dead -> end;
}
