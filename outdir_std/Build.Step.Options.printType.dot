
digraph flowchart {
    node [shape=rectangle, style=rounded, fontname=Helvetica]
    edge [fontname=Helvetica]

    start [label="Start printType"]
    switch_T [label="Switch (T)"]
    case_array_of_slices [label="Case: []const []const u8"]
    handle_array_of_slices [label="Output array declaration\nLoop through elements\nFormat each slice"]
    case_slice [label="Case: []const u8"]
    handle_slice [label="Output string constant\nCheck name presence"]
    case_nullable_slice [label="Case: ?[]const u8"]
    handle_nullable_slice [label="Check null\nOutput null or value"]
    case_semver [label="Case: SemanticVersion"]
    handle_semver [label="Output struct fields\n.major, .minor, .patch\nHandle pre/build metadata"]
    typeinfo_switch [label="@typeInfo(T) Switch"]
    array_type [label="Array type\nOutput array syntax\nRecurse for elements"]
    pointer_type [label="Pointer (slice)\nOutput slice syntax\nRecurse for elements"]
    optional_type [label="Optional type\nCheck value presence\nRecurse for inner type"]
    basic_types [label="Basic types (int, bool, etc.)\nDirect value output"]
    enum_type [label="Enum type\nCall printEnum\nOutput enum tag"]
    struct_type [label="Struct type\nCall printStruct\nOutput struct fields"]
    error_case [label="Unsupported type\nTrigger compile error"]
    end [label="Return"]

    start -> switch_T
    switch_T -> case_array_of_slices [label="匹配"]
    case_array_of_slices -> handle_array_of_slices -> end

    switch_T -> case_slice [label="匹配"]
    case_slice -> handle_slice -> end

    switch_T -> case_nullable_slice [label="匹配"]
    case_nullable_slice -> handle_nullable_slice -> end

    switch_T -> case_semver [label="匹配"]
    case_semver -> handle_semver -> end

    switch_T -> typeinfo_switch [label="未匹配"]
    typeinfo_switch -> array_type [label=".array"]
    array_type -> array_type [label="Recurse for each element"]

    typeinfo_switch -> pointer_type [label=".pointer"]
    pointer_type -> pointer_type [label="Recurse for each element"]

    typeinfo_switch -> optional_type [label=".optional"]
    optional_type -> optional_type [label="Recurse if value present"]

    typeinfo_switch -> basic_types [label=".int/.bool/.float etc."]
    basic_types -> end

    typeinfo_switch -> enum_type [label=".enum"]
    enum_type -> end

    typeinfo_switch -> struct_type [label=".struct"]
    struct_type -> end

    typeinfo_switch -> error_case [label="其他未支持类型"]
    error_case -> end [label="终止编译"]
}
