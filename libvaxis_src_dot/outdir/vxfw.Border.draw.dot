
digraph flowchart {
    node [shape=rectangle, style=rounded, fontname="Arial"];
    edge [fontname="Arial"];
    
    start [label="开始绘制边框"];
    process_max [label="计算max_width/max_height\n(max_width = ctx.max.width - 2)\n(max_height = ctx.max.height - 2)"];
    create_child_ctx [label="创建子上下文约束\n(child_ctx = ctx.withConstraints)"];
    draw_child [label="调用子元素绘制\n(child = self.child.draw(child_ctx))"];
    alloc_children [label="分配子表面数组\n(children = ctx.arena.alloc)"];
    set_child_position [label="设置子表面位置\n(origin={1,1}, z_index=0)"];
    calc_size [label="计算总尺寸\n(width = child.width + 2)\n(height = child.height + 2)"];
    init_surface [label="初始化主表面\n(surf = initWithChildren)"];
    draw_corners [label="绘制四角字符\n╭ ╮ ╯ ╰"];
    loop_horizontal [label="循环绘制水平边框\n(col从1到right_edge-1)\n写入─字符"];
    loop_vertical [label="循环绘制垂直边框\n(row从1到bottom_edge-1)\n写入│字符"];
    return_surf [label="返回最终表面"];

    start -> process_max;
    process_max -> create_child_ctx;
    create_child_ctx -> draw_child;
    draw_child -> alloc_children;
    alloc_children -> set_child_position;
    set_child_position -> calc_size;
    calc_size -> init_surface;
    init_surface -> draw_corners;
    draw_corners -> loop_horizontal;
    loop_horizontal -> loop_vertical;
    loop_vertical -> return_surf;
}
