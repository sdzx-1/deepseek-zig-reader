
digraph FnProtoExprInnerFlow {
    node [shape=rectangle, fontname="Courier", fontsize=10];
    edge [fontname="Courier", fontsize=10];

    start [label="开始 fnProtoExprInner"];
    init_vars [label="初始化变量\nastgen = gz.astgen\ntree = astgen.tree"];
    create_block [label="创建 block_scope 和 block_inst\nblock_inst = makeBlockInst(.block_inline)"];
    param_loop_start [label="参数处理循环开始\n初始化 param_type_i=0\nit = fn_proto.iterate(tree)"];
    param_next [label="获取下一个参数 param = it.next()", shape=diamond];
    check_comptime_noalias [label="检查 comptime/noalias\n根据 token 类型设置 noalias_bits", shape=diamond];
    check_anytype_varargs [label="检查 anytype/varargs\n判断是否为 anytype 或 ...", shape=diamond];
    handle_param_name [label="处理参数名称\n判断是否为下划线或有效名称"];
    handle_anytype_param [label="生成 .param_anytype_comptime\n或 .param_anytype 指令"];
    handle_normal_param [label="处理普通参数\n生成类型表达式\n添加 param_comptime/param 指令"];
    param_loop_end [label="param_type_i += 1\n继续循环?", shape=diamond];
    handle_callconv [label="处理调用约定\n判断 callconv_expr 是否存在", shape=diamond];
    implicit_ccc [label="添加隐式调用约定\n.block_scope.addBuiltinValue(.calling_convention_c)"];
    handle_ret_type [label="处理返回类型\ncomptimeExpr 生成 ret_ty"];
    add_func [label="调用 addFunc\n创建函数实例"];
    add_break [label="添加 break_inline 指令\n设置 block_scope 的块体"];
    append_instructions [label="将 block_inst 添加到 gz.instructions"];
    return_result [label="返回 rvalue(gz, ri, block_inst.toRef())"];

    start -> init_vars;
    init_vars -> create_block;
    create_block -> param_loop_start;
    param_loop_start -> param_next;
    param_next -> check_comptime_noalias [label="有参数"];
    check_comptime_noalias -> check_anytype_varargs;
    check_anytype_varargs -> handle_anytype_param [label="anytype/ellipsis"];
    check_anytype_varargs -> handle_normal_param [label="普通参数"];
    handle_anytype_param -> param_loop_end;
    handle_normal_param -> param_loop_end;
    param_loop_end -> param_next [label="继续循环"];
    param_next -> handle_callconv [label="无更多参数"];
    handle_callconv -> implicit_ccc [label="无 callconv_expr\n且 implicit_ccc=true"];
    handle_callconv -> handle_callconv_expr [label="存在 callconv_expr"];
    handle_callconv_expr [label="生成 comptimeExpr\n处理调用约定表达式"];
    handle_callconv -> handle_callconv_expr;
    handle_callconv_expr -> handle_ret_type;
    implicit_ccc -> handle_ret_type;
    handle_ret_type -> add_func;
    add_func -> add_break;
    add_break -> append_instructions;
    append_instructions -> return_result;
}
