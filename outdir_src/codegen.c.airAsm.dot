
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];

    start [label="开始 airAsm 函数"];
    parse_extra [label="解析 extra 数据\n获取 is_volatile 和 clobbers_len"];
    get_outputs_inputs [label="从 extra 中提取 outputs 和 inputs 数组"];
    handle_result_block [label="处理 result 代码块"];
    check_inst_ty [label="检查 inst_ty 是否有运行时类型"];
    alloc_inst_local [label="分配 inst_local 并初始化"];
    handle_outputs [label="遍历 outputs"];
    check_output_constraint [label="检查约束格式\n约束是否以 '={' 开头"];
    alloc_output_local [label="分配寄存器变量\n生成 __asm 声明"];
    handle_inputs [label="遍历 inputs"];
    check_input_constraint [label="检查输入约束\n是否包含非法字符"];
    alloc_input_local [label="分配输入变量\n处理寄存器约束"];
    process_clobbers [label="处理 clobbers 列表"];
    fix_asm_source [label="处理汇编模板\n替换 %[name] 语法"];
    write_asm_volatile [label="生成 __asm volatile 语句"];
    build_constraints [label="构建输出/输入约束条件"];
    write_asm_outputs [label="生成 outputs 约束代码"];
    write_asm_inputs [label="生成 inputs 约束代码"];
    write_clobbers [label="生成 clobbers 列表"];
    post_assignments [label="将寄存器值写回输出变量"];
    handle_unused [label="处理未使用的指令"];
    end [label="返回 result"];

    start -> parse_extra;
    parse_extra -> get_outputs_inputs;
    get_outputs_inputs -> handle_result_block;

    handle_result_block -> check_inst_ty;
    check_inst_ty -> alloc_inst_local [label="有运行时类型"];
    check_inst_ty -> handle_outputs [label="无运行时类型"];

    alloc_inst_local -> handle_outputs;
    handle_outputs -> check_output_constraint [label="循环处理每个 output"];
    check_output_constraint -> alloc_output_local [label="是寄存器约束"];
    check_output_constraint -> error [label="约束不合法"];

    alloc_output_local -> handle_outputs [label="继续下一个 output"];
    handle_outputs -> handle_inputs [label="outputs 处理完成"];

    handle_inputs -> check_input_constraint [label="循环处理每个 input"];
    check_input_constraint -> alloc_input_local [label="需要分配本地变量"];
    check_input_constraint -> error [label="约束不合法"];

    alloc_input_local -> handle_inputs [label="继续下一个 input"];
    handle_inputs -> process_clobbers [label="inputs 处理完成"];

    process_clobbers -> fix_asm_source;
    fix_asm_source -> write_asm_volatile;
    write_asm_volatile -> build_constraints;

    build_constraints -> write_asm_outputs [label="生成 outputs 约束"];
    write_asm_outputs -> write_asm_inputs [label="生成 inputs 约束"];
    write_asm_inputs -> write_clobbers;
    write_clobbers -> post_assignments;

    post_assignments -> handle_unused;
    handle_unused -> end;

    error [label="返回错误", shape="octagon", color=red];
    { rank=same; handle_outputs error }
    { rank=same; handle_inputs error }
}
