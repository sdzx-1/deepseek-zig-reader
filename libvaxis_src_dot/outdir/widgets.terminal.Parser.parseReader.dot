
digraph parseReader {
    graph [fontname="Arial", nodesep=0.5, ranksep=1];
    node [fontname="Arial", shape=rectangle, style=rounded];
    edge [fontname="Arial"];

    start [label="parseReader 入口\n清空缓冲区"];
    loop [label="循环开始"];
    check_pending [label="检查 pending_byte\n是否存在未处理的字节?"];
    read_byte [label="从 reader 读取新字节"];
    process_byte [label="处理当前字节"];
    esc_case [label="字节是 0x1b (ESC)?"];
    handle_esc [label="读取下一个字节"];
    esc_subcases [label="根据下一个字节的值分支"];
    ss2 [label="返回 .ss2\n并读取第三个字节"];
    ss3 [label="返回 .ss3\n并读取第三个字节"];
    csi [label="调用 parseCsi(reader)"];
    osc [label="调用 parseOsc(reader)"];
    apc [label="调用 parseApc(reader)"];
    esc_other [label="追加到缓冲区\n返回 .escape"];
    c0_control [label="返回 .c0 控制字符"];
    ground [label="追加到缓冲区\n调用 parseGround(buffered)"];
    pending_handled [label="pending_byte = null"];

    start -> loop;
    loop -> check_pending;
    check_pending -> read_byte [label="否"];
    check_pending -> pending_handled [label="是"];
    pending_handled -> process_byte;
    read_byte -> process_byte;
    process_byte -> esc_case;

    esc_case -> handle_esc [label="是"];
    esc_case -> c0_control [label="字节是 C0 控制字符"];
    esc_case -> ground [label="其他情况"];

    handle_esc -> esc_subcases;
    esc_subcases -> ss2 [label="0x4E"];
    esc_subcases -> ss3 [label="0x4F"];
    esc_subcases -> csi [label="0x5B"];
    esc_subcases -> osc [label="0x5D"];
    esc_subcases -> apc [label="0x5F"];
    esc_subcases -> esc_other [label="0x20-0x2F"];
    esc_subcases -> esc_other [label="其他值"];
    
    // 特殊处理分支
    esc_subcases -> skip [label="0x50/0x58/0x5E\n跳过直到 ST", color=grey];
    skip [label="调用 skipUntilST(reader)", color=grey, style=dashed];
    
    // 连接返回节点
    ss2 -> end [label="返回"];
    ss3 -> end [label="返回"];
    csi -> end [label="返回"];
    osc -> end [label="返回"];
    apc -> end [label="返回"];
    esc_other -> end [label="返回"];
    c0_control -> end [label="返回"];
    ground -> end [label="返回"];

    end [label="函数返回", shape=ellipse];
    
    // 循环继续
    edge [style=invis];
    end -> loop [constraint=false];
    edge [style=solid];
    ground -> loop [label="继续循环?" style=dashed, color=blue];
}
