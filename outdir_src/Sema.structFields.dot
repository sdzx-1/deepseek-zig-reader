
digraph flowchart {
    node [shape=rectangle, style=rounded, fontname=Helvetica];
    edge [fontname=Helvetica];

    start [label="开始 structFields"];
    check_fields_len [label="检查 fields_len == 0?" shape=diamond];
    handle_packed [label="调用 backingIntType\n设置 packed 布局"];
    handle_auto_extern [label="设置 auto/extern 布局"];
    alloc_fields [label="分配 fields 数组"];
    parse_flags [label="解析 ZIR 字段标志位\n(has_align/has_init/is_comptime)"];
    process_field_names [label="处理字段名称\n存储到 InternPool"];
    handle_type_body [label="处理类型体或类型引用"];
    validate_field_types [label="验证字段类型\n(opaque/noreturn 检查)"];
    check_layout [label="检查 struct_type.layout" shape=diamond];
    handle_extern [label="验证 extern 类型约束"];
    handle_packed_type [label="验证 packed 类型约束"];
    process_align [label="处理对齐属性"];
    process_inits [label="跳过初始值处理（第二阶段）"];
    finalize_struct [label="清除临时状态\n设置字段初始化标志"];
    flush_exports [label="调用 flushExports"];
    end [label="返回"];

    start -> check_fields_len;
    check_fields_len -> handle_packed [label="fields_len=0\n且 layout=packed"];
    check_fields_len -> handle_auto_extern [label="fields_len=0\n且 layout=auto/extern"];
    check_fields_len -> alloc_fields [label="fields_len>0"];

    alloc_fields -> parse_flags;
    parse_flags -> process_field_names;
    process_field_names -> handle_type_body;
    handle_type_body -> validate_field_types;

    validate_field_types -> check_layout;
    check_layout -> handle_extern [label="layout=extern"];
    check_layout -> handle_packed_type [label="layout=packed"];
    check_layout -> process_align [label="其他布局"];

    handle_extern -> process_align;
    handle_packed_type -> process_align;
    process_align -> process_inits;

    process_inits -> finalize_struct [label="遍历所有字段完成"];
    finalize_struct -> flush_exports;
    flush_exports -> end;

    handle_packed -> end;
    handle_auto_extern -> end;
}
