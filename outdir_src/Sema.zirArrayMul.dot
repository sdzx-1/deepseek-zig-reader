
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];

    start [label="开始 (zirArrayMul)"];
    parse_inst [label="解析指令数据\n(inst_data, extra)"];
    resolve_lhs [label="解析左操作数\n(uncoerced_lhs)"];
    check_res_ty [label="检查结果类型\n(extra.res_ty)"];
    coerce_lhs [label="尝试类型强制转换\n(lhs_dest_ty)"];
    check_tuple [label="判断 lhs_ty 是否为元组"];
    handle_tuple [label="处理元组乘法\n(analyzeTupleMul)"];
    get_array_info [label="获取数组/切片信息\n(getArrayCatInfo)"];
    check_indexable [label="检查是否可索引"];
    resolve_rhs [label="解析右操作数因子\n(factor)"];
    calc_length [label="计算结果长度\n(result_len_u64)"];
    create_result_ty [label="创建结果类型\n(result_ty)"];
    resolve_value [label="尝试解析常量值"];
    optimize_repeated [label="优化重复元素"];
    gen_const_agg [label="生成常量聚合值"];
    require_runtime [label="要求运行时块"];
    handle_ptr [label="处理指针地址空间\n(分配内存/存储元素)"];
    gen_agg_init [label="生成聚合初始化"];
    return_result [label="返回结果"];
    error_msg [label="生成错误信息"];

    start -> parse_inst;
    parse_inst -> resolve_lhs;
    resolve_lhs -> check_res_ty;
    check_res_ty -> coerce_lhs [label="存在 res_ty"];
    check_res_ty -> check_tuple [label="无 res_ty"];
    coerce_lhs -> check_tuple;
    check_tuple -> handle_tuple [label="是元组"];
    check_tuple -> get_array_info [label="非元组"];
    handle_tuple -> return_result;
    get_array_info -> check_indexable;
    check_indexable -> error_msg [label="不可索引"];
    check_indexable -> resolve_rhs [label="可索引"];
    error_msg -> return_result;
    resolve_rhs -> calc_length;
    calc_length -> create_result_ty;
    create_result_ty -> resolve_value;
    resolve_value -> optimize_repeated [label="找到常量"];
    optimize_repeated -> gen_const_agg;
    gen_const_agg -> return_result;
    resolve_value -> require_runtime [label="非常量"];
    require_runtime -> handle_ptr [label="存在指针地址空间"];
    require_runtime -> gen_agg_init [label="无指针地址空间"];
    handle_ptr -> return_result;
    gen_agg_init -> return_result;
}
