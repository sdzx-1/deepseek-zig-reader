
digraph flowchart {
    node [shape=rectangle, style=rounded];
    edge [arrowhead=normal];

    start [label="开始 analyzeSwitchRuntimeBlock"];
    init [label="初始化数据结构\n(cases_extra, branch_hints, case_block)"];
    process_scalar [label="处理标量cases循环"];
    process_multi [label="处理多cases循环"];
    process_special [label="处理特殊case (else/枚举/错误集)"];
    generate_air [label="生成Air指令并返回"];
    end [label="结束"];

    start -> init;
    init -> process_scalar;

    subgraph scalar_loop {
        node [shape=diamond];
        check_scalar [label="scalar_i < scalar_cases_len?"];
        handle_scalar_case [label="处理单个标量case\n生成分支提示\n填充cases_extra"];
        check_scalar -> handle_scalar_case [label="是"];
        handle_scalar_case -> check_scalar;
    }

    init -> check_scalar;
    check_scalar -> process_multi [label="否"];

    subgraph multi_loop {
        node [shape=diamond];
        check_multi [label="multi_i < multi_cases_len?"];
        handle_multi_case [label="处理多case项\n处理范围展开\n生成分支提示"];
        check_inline [label="info.is_inline?"];
        expand_inline [label="展开内联范围\n逐个生成case"];
        handle_normal_multi [label="处理普通多case"];
        
        check_multi -> handle_multi_case [label="是"];
        handle_multi_case -> check_inline;
        check_inline -> expand_inline [label="是"];
        check_inline -> handle_normal_multi [label="否"];
        expand_inline -> check_multi;
        handle_normal_multi -> check_multi;
    }

    process_scalar -> check_multi [label="完成标量处理"];
    check_multi -> process_special [label="否"];

    subgraph special_handling {
        node [shape=diamond];
        check_else_body [label="存在特殊case需要处理?"];
        handle_enum [label="处理枚举类型\n补全未覆盖的枚举值"];
        handle_error [label="处理错误集类型\n补全未覆盖的错误"];
        handle_int [label="处理整数范围\n生成缺失的区间"];
        handle_bool [label="处理布尔值\n补充true/false"];
        final_else [label="生成else体\n安全检查/不可达处理"];
        
        check_else_body -> handle_enum [label="枚举类型"];
        check_else_body -> handle_error [label="错误集"];
        check_else_body -> handle_int [label="整数类型"];
        check_else_body -> handle_bool [label="布尔类型"];
        handle_enum -> final_else;
        handle_error -> final_else;
        handle_int -> final_else;
        handle_bool -> final_else;
    }

    process_multi -> check_else_body;
    check_else_body -> generate_air [label="无特殊case"];

    generate_air -> end;

    // 关键数据流连接
    handle_scalar_case -> cases_extra;
    handle_multi_case -> cases_extra;
    expand_inline -> cases_extra;
    handle_normal_multi -> cases_extra;
    handle_enum -> cases_extra;
    handle_error -> cases_extra;
    handle_int -> cases_extra;
    handle_bool -> cases_extra;
    final_else -> else_body;

    // 分支提示收集
    handle_scalar_case -> branch_hints;
    handle_multi_case -> branch_hints;
    expand_inline -> branch_hints;
    handle_normal_multi -> branch_hints;
    final_else -> branch_hints;

    // Air指令生成细节
    generate_air [shape=component, label="组合以下内容：\n- branch_hints\n- cases_extra\n- else_body\n生成.switch_br指令"];
}
