
digraph flowchart {
    node [shape=rectangle, style=rounded, fontname="Helvetica"];
    edge [fontname="Helvetica"];

    start [label="开始 reifyEnum"];
    init_vars [label="初始化变量: pt, zcu, gpa, ip"];
    calc_fields_len [label="计算 fields_len = arrayLen(fields_val)"];
    init_hasher [label="初始化 Wyhash 哈希器"];
    hash_core_params [label="哈希核心参数: tag_ty, is_exhaustive, fields_len"];
    loop1_start [label="遍历所有字段 (第一次循环)"];
    get_field_info [label="获取 field_info"];
    get_field_name_val [label="获取 field_name_val"];
    resolve_field_value [label="解析 field_value_val"];
    hash_field_data [label="哈希字段名和值"];
    loop1_end [label="循环结束？"];
    tracked_inst [label="跟踪 ZIR 指令 tracked_inst"];
    get_enum_type [label="尝试获取枚举类型 ip.getEnumType()"];
    check_existing [label="是否已存在类型？"];
    return_existing [label="返回现有类型引用"];
    create_wip_ty [label="创建 WIP 类型"];
    check_tag_type [label="检查 tag_ty 是否为整数类型"];
    set_typename [label="设置枚举类型名称"];
    create_namespace [label="创建新命名空间"];
    prepare_wip_ty [label="准备 WIP 类型\n设置 tag_ty 和 namespace"];
    loop2_start [label="遍历所有字段 (第二次循环)"];
    validate_field_value [label="验证字段值是否符合 tag_ty"];
    check_value_fit [label="值是否适配类型？"];
    check_duplicates [label="检查字段名/值重复"];
    handle_conflict [label="处理字段冲突\n生成错误信息"];
    loop2_end [label="循环结束？"];
    check_exhaustive [label="检查非穷尽枚举有效性"];
    codegen_check [label="代码生成条件检查"];
    return_result [label="返回 Air 引用"];
    error_handling [label="错误处理路径", shape=diamond];

    start -> init_vars -> calc_fields_len -> init_hasher -> hash_core_params;
    hash_core_params -> loop1_start;

    loop1_start -> get_field_info -> get_field_name_val -> resolve_field_value -> hash_field_data -> loop1_end;
    loop1_end -> loop1_start [label="继续循环"];
    loop1_end -> tracked_inst;

    tracked_inst -> get_enum_type -> check_existing;
    check_existing -> return_existing [label="是"];
    check_existing -> create_wip_ty [label="否"];

    create_wip_ty -> check_tag_type;
    check_tag_type -> error_handling [label="非整数类型"];
    check_tag_type -> set_typename [label="通过检查"];
    
    set_typename -> create_namespace -> prepare_wip_ty -> loop2_start;

    loop2_start -> validate_field_value -> check_value_fit;
    check_value_fit -> error_handling [label="不匹配"];
    check_value_fit -> check_duplicates [label="匹配"];
    check_duplicates -> handle_conflict [label="存在冲突"];
    check_duplicates -> loop2_end [label="无冲突"];
    handle_conflict -> error_handling;
    loop2_end -> loop2_start [label="继续循环"];
    loop2_end -> check_exhaustive;

    check_exhaustive -> error_handling [label="非穷尽枚举验证失败"];
    check_exhaustive -> codegen_check [label="通过验证"];
    codegen_check -> return_result;

    error_handling -> return_result [label="错误处理后返回"];

    // 错误处理连接
    edge [style=dashed, color=red];
    init_vars -> error_handling;
    calc_fields_len -> error_handling;
    get_field_info -> error_handling;
    resolve_field_value -> error_handling;
    get_enum_type -> error_handling;
    create_namespace -> error_handling;
    validate_field_value -> error_handling;
}
