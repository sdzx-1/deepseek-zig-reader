
digraph flowchart {
    node [shape=rectangle, fontname="Courier", fontsize=12];
    edge [fontname="Courier", fontsize=10];

    start [label="开始函数\n初始化跟踪(tracy)"];
    parse_inst [label="解析指令数据\n获取操作数值(raw_operand_val)"];
    handle_cases [label="处理标量case和多个case\n构建case_vals列表"];
    check_operand_type [label="检查操作数类型是否为错误联合类型", shape=diamond];
    validate_err_set [label="验证错误集合\n处理else分支"];
    resolve_const_value [label="尝试解析编译时已知值", shape=diamond];
    handle_payload [label="处理非错误payload分支\n生成正常代码路径"];
    handle_error [label="处理错误值\n捕获错误信息"];
    check_empty_cases [label="是否无case且else处理空错误集合", shape=diamond];
    comptime_check [label="编译时检查\n强制解析常量值"];
    build_cond [label="构建条件表达式(cond)\n根据payload_is_ref选择操作"];
    create_cond_br [label="生成cond_br指令\n合并true/false分支代码"];
    resolve_block [label="解析块结果\n返回最终指令引用"];
    error_exit [label="返回类型错误\n(fail路径)"];

    start -> parse_inst;
    parse_inst -> handle_cases;
    handle_cases -> check_operand_type;
    
    check_operand_type -> error_exit [label="类型不符"];
    check_operand_type -> validate_err_set [label="类型正确"];
    
    validate_err_set -> resolve_const_value;
    
    resolve_const_value -> handle_payload [label="是payload分支"];
    resolve_const_value -> handle_error [label="是错误分支"];
    
    handle_payload -> resolve_block [label="直接返回正常代码路径"];
    handle_error -> check_empty_cases;
    
    check_empty_cases -> resolve_block [label="满足条件"];
    check_empty_cases -> comptime_check [label="不满足"];
    
    comptime_check -> build_cond;
    
    build_cond -> create_cond_br;
    create_cond_br -> resolve_block;
    
    error_exit -> resolve_block [style=invis]; // 错误路径直接终止
}
