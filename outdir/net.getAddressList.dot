
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];

    start [label="开始 getAddressList"];
    create_address_list [label="初始化AddressList和Arena"];
    check_windows [label="native_os == .windows?", shape=diamond];
    check_libc [label="builtin.link_libc?", shape=diamond];
    check_linux [label="native_os == .linux?", shape=diamond];
    error_os [label="@compileError(\"未实现\")", shape=box];

    subgraph cluster_windows {
        label="Windows处理";
        win_init [label="分配name_c和port_c"];
        win_hints [label="设置hints结构"];
        win_call_loop [label="循环调用getaddrinfo", shape=hexagon];
        win_handle_errors [label="处理Winsock错误码"];
        win_count_addrs [label="统计地址数量"];
        win_fill_addrs [label="填充地址到result.addrs"];
        win_canon_name [label="处理canonical name"];
    }

    subgraph cluster_libc {
        label="libc处理";
        libc_init [label="分配name_c和port_c"];
        libc_hints [label="设置hints结构"];
        libc_call [label="调用getaddrinfo"];
        libc_handle_errors [label="处理EAI错误码"];
        libc_count_addrs [label="统计地址数量"];
        libc_fill_addrs [label="填充地址到result.addrs"];
        libc_canon_name [label="处理canonical name"];
    }

    subgraph cluster_linux {
        label="Linux处理";
        linux_init [label="初始化lookup_addrs和canon"];
        linux_call [label="调用linuxLookupName"];
        linux_alloc [label="分配地址数组"];
        linux_set_canon [label="设置canon_name"];
        linux_fill [label="填充地址并验证端口"];
    }

    end [label="返回result"];

    start -> create_address_list;
    create_address_list -> check_windows;

    check_windows -> win_init [label="是"];
    check_windows -> check_libc [label="否"];

    check_libc -> libc_init [label="是"];
    check_libc -> check_linux [label="否"];

    check_linux -> linux_init [label="是"];
    check_linux -> error_os [label="否"];

    win_init -> win_hints -> win_call_loop;
    win_call_loop -> win_handle_errors -> win_count_addrs;
    win_count_addrs -> win_fill_addrs -> win_canon_name -> end;

    libc_init -> libc_hints -> libc_call;
    libc_call -> libc_handle_errors -> libc_count_addrs;
    libc_count_addrs -> libc_fill_addrs -> libc_canon_name -> end;

    linux_init -> linux_call -> linux_alloc;
    linux_alloc -> linux_set_canon -> linux_fill -> end;

    error_os -> end [style=invis];
}
