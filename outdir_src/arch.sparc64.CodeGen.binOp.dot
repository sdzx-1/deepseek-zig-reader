
digraph binOp_flowchart {
    graph [fontname="Arial", fontsize=12, rankdir=TB];
    node [fontname="Arial", fontsize=10, shape=rectangle];
    edge [fontname="Arial", fontsize=10];

    start [label="开始 binOp", shape=ellipse];
    end [label="返回结果或错误", shape=ellipse];

    switch_tag [label="switch (tag)", shape=diamond];
    handle_basic_ops [label="处理基础运算\n(add/sub/mul/bit_and/bit_or/xor/cmp_eq)", shape=box];
    handle_wrap_ops [label="处理溢出包装运算\n(add_wrap/sub_wrap/mul_wrap)", shape=box];
    handle_div_trunc [label="处理截断除法\n(div_trunc)", shape=box];
    handle_ptr_add [label="处理指针加法\n(ptr_add)", shape=box];
    handle_bool_ops [label="处理布尔运算\n(bool_and/bool_or)", shape=box];
    handle_shift_ops [label="处理位移运算\n(shl/shr)", shape=box];
    handle_exact_shifts [label="处理精确位移\n(shl_exact/shr_exact)", shape=box];
    default_case [label="返回未实现错误", shape=box];

    start -> switch_tag;

    switch_tag -> handle_basic_ops [label=".add/.sub/..."];
    switch_tag -> handle_wrap_ops [label=".add_wrap/.sub_wrap/..."];
    switch_tag -> handle_div_trunc [label=".div_trunc"];
    switch_tag -> handle_ptr_add [label=".ptr_add"];
    switch_tag -> handle_bool_ops [label=".bool_and/.bool_or"];
    switch_tag -> handle_shift_ops [label=".shl/.shr"];
    switch_tag -> handle_exact_shifts [label=".shl_exact/.shr_exact"];
    switch_tag -> default_case [label="其他"];

    subgraph cluster_basic_ops {
        label="基础运算处理";
        basic_type_check [label="检查类型是否为\nfloat/vector/int", shape=diamond];
        handle_float [label="返回浮点未实现错误", shape=box];
        handle_vector [label="返回向量未实现错误", shape=box];
        handle_int [label="处理整数运算\n（检查位数和立即数）", shape=box];
        check_bits [label="bits <= 64?", shape=diamond];
        handle_large_int [label="返回>64位未实现错误", shape=box];
        check_immediate [label="检查立即数条件", shape=diamond];
        call_immediate [label="调用 binOpImmediate", shape=box];
        call_register [label="调用 binOpRegister", shape=box];
        
        handle_basic_ops -> basic_type_check;
        basic_type_check -> handle_float [label="float"];
        basic_type_check -> handle_vector [label="vector"];
        basic_type_check -> handle_int [label="int"];
        handle_int -> check_bits;
        check_bits -> handle_large_int [label=">64"];
        check_bits -> check_immediate [label="<=64"];
        check_immediate -> call_immediate [label="满足条件"];
        check_immediate -> call_register [label="不满足条件"];
        handle_float -> end;
        handle_vector -> end;
        handle_large_int -> end;
        call_immediate -> end;
        call_register -> end;
    }

    subgraph cluster_wrap_ops {
        label="溢出包装运算处理";
        wrap_generate_base [label="生成基础操作", shape=box];
        wrap_truncate [label="截断结果（如需要）", shape=box];
        check_wrap_bits [label="bits <=64?", shape=diamond];
        wrap_large_int [label="返回>64位未实现错误", shape=box];
        
        handle_wrap_ops -> wrap_generate_base;
        wrap_generate_base -> check_wrap_bits;
        check_wrap_bits -> wrap_truncate [label="<=64"];
        check_wrap_bits -> wrap_large_int [label=">64"];
        wrap_truncate -> end;
        wrap_large_int -> end;
    }

    subgraph cluster_ptr_add {
        label="指针加法处理";
        ptr_check_elem_size [label="检查元素大小是否为1", shape=diamond];
        ptr_call_base_op [label="直接调用 binOpRegister", shape=box];
        ptr_calc_offset [label="计算字节偏移量", shape=box];
        ptr_call_addr [label="计算最终地址", shape=box];
        
        handle_ptr_add -> ptr_check_elem_size;
        ptr_check_elem_size -> ptr_call_base_op [label="elem_size=1"];
        ptr_check_elem_size -> ptr_calc_offset [label="elem_size≠1"];
        ptr_calc_offset -> ptr_call_addr;
        ptr_call_addr -> end;
        ptr_call_base_op -> end;
    }

    handle_div_trunc -> end;
    handle_bool_ops -> end;
    handle_shift_ops -> end;
    handle_exact_shifts -> end;
    default_case -> end;
}
