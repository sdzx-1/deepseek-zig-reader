
digraph zirMemcpy {
    graph [fontname="Arial", nodesep=0.5, ranksep=0.5];
    node [fontname="Arial", shape=rect, style="rounded"];
    edge [fontname="Arial"];

    start [label="开始", shape=ellipse];
    end [label="结束", shape=ellipse];

    resolve_inst_data [label="解析指令数据\n(inst_data, extra)"];
    get_src_dest [label="获取源/目标指针\n(dest_ptr, src_ptr)"];
    check_const_ptr [label="目标指针是否为常量？", shape=diamond];
    fail_const_ptr [label="返回错误\n\"cannot memcpy to constant pointer\""];
    check_lengths_known [label="源和目标长度均未知？", shape=diamond];
    fail_unknown_length [label="生成错误\n\"unknown @memcpy length\"\n并添加类型说明"];
    check_elem_compatibility [label="元素类型是否兼容？", shape=diamond];
    fail_elem_incompatible [label="生成类型不兼容错误"];
    resolve_lengths [label="尝试解析长度\n(dest_len, src_len)"];
    check_length_mismatch [label="编译时长度是否不匹配？", shape=diamond];
    fail_length_mismatch [label="生成错误\n\"non-matching @memcpy lengths\""];
    zero_bit_check [label="元素是否为零比特类型？", shape=diamond];
    check_runtime_safety [label="运行时安全检查\n(指针别名、长度匹配)"];
    generate_memcpy [label="生成.memcpy AIR指令"];

    start -> resolve_inst_data;
    resolve_inst_data -> get_src_dest;
    get_src_dest -> check_const_ptr;

    check_const_ptr -> fail_const_ptr [label="是"];
    check_const_ptr -> check_lengths_known [label="否"];

    check_lengths_known -> fail_unknown_length [label="是"];
    check_lengths_known -> check_elem_compatibility [label="否"];

    check_elem_compatibility -> fail_elem_incompatible [label="否"];
    check_elem_compatibility -> resolve_lengths [label="是"];

    resolve_lengths -> check_length_mismatch;
    check_length_mismatch -> fail_length_mismatch [label="是"];
    check_length_mismatch -> zero_bit_check [label="否"];

    zero_bit_check -> end [label="是"];
    zero_bit_check -> check_runtime_safety [label="否"];

    check_runtime_safety -> generate_memcpy;
    generate_memcpy -> end;

    // 错误处理路径终止
    fail_const_ptr -> end;
    fail_unknown_length -> end;
    fail_elem_incompatible -> end;
    fail_length_mismatch -> end;

    // 隐藏边对齐布局
    {rank=same; check_const_ptr check_lengths_known check_elem_compatibility}
    {rank=same; fail_const_ptr fail_unknown_length fail_elem_incompatible}
}
