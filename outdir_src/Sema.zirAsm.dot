
digraph flowchart {
    node [shape=rectangle, style=rounded, fontname=Helvetica];
    edge [fontname=Helvetica];

    start [label="开始zirAsm函数"];
    init [label="初始化跟踪和参数解析"];
    check_global [label="检查是否为全局汇编 (is_global_assembly)"];

    global_checks [label="验证全局汇编约束"];
    add_global_asm [label="添加全局汇编代码到zcu"];
    return_void [label="返回.void_value"];

    require_runtime [label="确保当前块是运行时块"];
    process_outputs [label="处理输出参数 (循环遍历outputs_len)"];
    process_inputs [label="处理输入参数 (循环遍历inputs_len)"];
    process_clobbers [label="处理clobbers (循环遍历clobbers_len)"];

    prepare_air [label="准备Air额外数据"];
    write_air_extra [label="将输出、输入、clobbers、源码写入air_extra"];
    return_asm_air [label="返回asm_air指令"];

    // 错误处理分支
    error_outputs [label="返回错误: 全局汇编不支持outputs"];
    error_inputs [label="返回错误: 全局汇编不支持inputs"];
    error_clobbers [label="返回错误: 全局汇编不支持clobbers"];
    error_volatile [label="返回错误: volatile冗余"];
    error_const_local [label="返回错误: 不能输出到const局部变量"];

    start -> init;
    init -> check_global;

    // 全局汇编分支
    check_global -> global_checks [label="是"];
    global_checks -> error_outputs [label="outputs_len≠0"];
    global_checks -> error_inputs [label="inputs_len≠0"];
    global_checks -> error_clobbers [label="clobbers_len≠0"];
    global_checks -> error_volatile [label="is_volatile=true"];
    global_checks -> add_global_asm [label="所有检查通过"];
    add_global_asm -> return_void;

    // 非全局汇编分支
    check_global -> require_runtime [label="否"];
    require_runtime -> process_outputs;

    process_outputs -> error_const_local [label="检测到对const局部变量的输出"];
    process_outputs -> process_inputs [label="所有输出处理完成"];

    process_inputs -> process_clobbers [label="所有输入处理完成"];
    process_clobbers -> prepare_air;
    prepare_air -> write_air_extra;
    write_air_extra -> return_asm_air;

    // 错误处理连接
    error_outputs -> return_void [style=dashed, color=red];
    error_inputs -> return_void [style=dashed, color=red];
    error_clobbers -> return_void [style=dashed, color=red];
    error_volatile -> return_void [style=dashed, color=red];
    error_const_local -> return_asm_air [style=dashed, color=red];
}
