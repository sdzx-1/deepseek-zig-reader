
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];

    start [label="开始 genSetStack"];
    end [label="返回/结束"];
    dead_case [label="处理 .dead\n触发 unreachable"];
    unreach_none_case [label="处理 .unreach/.none\n直接返回"];
    undef_case [label="处理 .undef\n检查 abi_size"];
    undef_small [label="abi_size 1/2/4/8\n递归调用并传递立即数"];
    undef_large [label="abi_size 其他\n调用 genInlineMemset"];
    compare_flags_imm_ptr [label="处理 .compare_flags/.immediate/.ptr_stack_offset\n复制到临时寄存器并递归调用"];
    register_case [label="处理 .register\n根据 abi_size 选择存储指令"];
    reg_overflow [label="处理 .register_with_overflow\n写入结构体字段并设置条件标志"];
    linker_mem_stack [label="处理 .linker_load/.memory/.stack_argument_offset/.stack_offset"];
    abi_small [label="abi_size ≤8\n复制到临时寄存器并递归调用"];
    abi_large [label="abi_size >8\n分配寄存器，设置地址，调用 genInlineMemcpy"];

    start -> {dead_case unreach_none_case undef_case compare_flags_imm_ptr register_case reg_overflow linker_mem_stack};
    
    dead_case -> end [label="触发 unreachable"];
    unreach_none_case -> end;
    
    undef_case -> {undef_small undef_large};
    undef_small -> end;
    undef_large -> end;
    
    compare_flags_imm_ptr -> end;
    
    register_case -> end [label="生成存储指令"];
    
    reg_overflow -> end [label="分别写入栈和条件寄存器"];
    
    linker_mem_stack -> {abi_small abi_large};
    abi_small -> end;
    abi_large -> end [label="执行内存拷贝"];
    
    // 隐藏相同层级节点的交叉连接
    {rank=same; dead_case unreach_none_case undef_case compare_flags_imm_ptr register_case reg_overflow linker_mem_stack}
    {rank=same; undef_small undef_large abi_small abi_large}
}
