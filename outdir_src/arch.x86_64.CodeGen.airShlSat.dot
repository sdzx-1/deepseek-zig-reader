
digraph flowchart {
    node [fontname="Courier New", shape=rectangle];
    edge [fontname="Courier New"];

    start [label="开始 airShlSat"];
    get_zcu_binop [label="获取 zcu 和 bin_op"];
    get_types [label="获取 lhs_ty 和 rhs_ty"];
    check_int_type [label="检查 lhs_ty 是否为整数类型"];
    int_type [label="整数类型分支"];
    check_bits [label="检查位宽条件\n(lhs_bits <=32 && rhs_bits <=5)\n|| ..."];
    bits_fail [label="返回错误\nTODO implement shl_sat"];
    spill_registers [label="溢出寄存器 (RCX)"];
    resolve_operands [label="解析 lhs 和 rhs 操作数"];
    gen_shift_left [label="生成左移操作 (SHL)"];
    handle_dst_mcv [label="处理目标位置:\n寄存器/寄存器对/帧加载"];
    gen_shift_right [label="生成右移操作 (SHR)"];
    check_overflow [label="比较原始值和移位后值\n是否不等"];
    handle_overflow [label="溢出处理分支"];
    no_overflow [label="无溢出"];
    unsigned_case [label="无符号类型:\n设置最大值为边界"];
    signed_case [label="有符号类型:\n检查符号"];
    check_sign [label="检查 lhs 符号"];
    negative_case [label="负数:\n设置最小值"];
    positive_case [label="正数:\n设置最大值"];
    finish [label="返回结果并结束"];
    other_types [label="其他类型分支\n返回错误"];

    start -> get_zcu_binop;
    get_zcu_binop -> get_types;
    get_types -> check_int_type;
    check_int_type -> int_type [label=".int"];
    check_int_type -> other_types [label="其他"];
    other_types -> finish;
    int_type -> check_bits;
    check_bits -> bits_fail [label="条件不满足"];
    check_bits -> spill_registers [label="条件满足"];
    bits_fail -> finish;
    spill_registers -> resolve_operands;
    resolve_operands -> gen_shift_left;
    gen_shift_left -> handle_dst_mcv;
    handle_dst_mcv -> gen_shift_right;
    gen_shift_right -> check_overflow;
    check_overflow -> handle_overflow [label="不相等"];
    check_overflow -> no_overflow [label="相等"];
    handle_overflow -> unsigned_case [label="无符号"];
    handle_overflow -> signed_case [label="有符号"];
    unsigned_case -> finish;
    signed_case -> check_sign;
    check_sign -> negative_case [label="<0"];
    check_sign -> positive_case [label=">=0"];
    negative_case -> finish;
    positive_case -> finish;
    no_overflow -> finish;
}
