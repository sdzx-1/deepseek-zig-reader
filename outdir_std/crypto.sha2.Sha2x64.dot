
digraph Sha2x64 {
    rankdir=TB;
    node [shape=rectangle, style="rounded", fontname="Courier"];

    // 主结构
    subgraph cluster_Sha2x64 {
        label="Sha2x64 结构";
        labelloc="t";
        fontname="Courier";
        
        // 初始化
        init [label="init(options)\n初始化状态 with IV"];
        
        // 更新数据
        update [label="update(d: *Self, b: []const u8)\n处理输入数据"];
        update_partial [label="处理部分块\n复制到缓冲区并调用round"];
        update_full [label="处理完整块\n循环调用round"];
        update_remainder [label="保存剩余数据到缓冲区"];
        
        // 最终处理
        final [label="final(d: *Self, out: *[digest_length]u8)\n填充数据并生成最终哈希"];
        final_pad [label="添加填充位 0x80"];
        final_check [label="检查块空间是否足够"];
        final_length [label="追加消息长度"];
        final_round [label="调用round处理最后一块"];
        final_output [label="生成输出哈希值"];

        // 核心函数
        round [label="round(d: *Self, b: *const [128]u8)\n处理单个128字节块"];
        round_expand [label="扩展消息到80个字"];
        round_compress [label="压缩函数处理80轮"];
        round_update [label="更新状态寄存器"];

        // 调用关系
        init -> update;
        
        update -> update_partial [label="缓冲区非空时"];
        update -> update_full [label="处理完整块"];
        update -> update_remainder [label="保存剩余数据"];
        
        update_partial -> round;
        update_full -> round;
        
        update -> final [label="结束数据输入"];
        
        final -> final_pad;
        final_pad -> final_check;
        final_check -> final_round [label="空间不足时"];
        final_check -> final_length;
        final_length -> final_round;
        final_round -> round;
        final_round -> final_output;
        
        round -> round_expand;
        round_expand -> round_compress;
        round_compress -> round_update;
    }

    // 外部接口
    hash [label="hash(b: []const u8, out: *[digest_length]u8)\n一次性哈希入口"];
    hash -> init;
    hash -> update;
    hash -> final;

    // 特殊方法
    peek [label="peek(d: Self)\n复制状态并生成哈希"];
    peek -> finalResult;
    finalResult [label="finalResult()\n返回最终哈希值"];
    finalResult -> final;

    // 样式调整
    {rank=same; init update final}
    {rank=same; hash peek}
    {rank=same; round_expand round_compress round_update}
}
