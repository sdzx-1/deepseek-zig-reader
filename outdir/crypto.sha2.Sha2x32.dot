
digraph Sha2x32 {
    rankdir="TB";
    node [shape=rectangle, style="rounded"];

    // 入口点
    start [label="开始调用 Sha2x32 函数"];

    // 初始化
    init [label="初始化结构体\n(Self.init)"];
    start -> init;

    // Update 过程
    update [label="处理输入数据\n(update)"];
    init -> update;

    // Update 内部逻辑
    check_buf [label="检查是否有部分缓冲区数据"];
    update -> check_buf;

    process_partial [label="复制到缓冲区并处理完整块"];
    check_buf -> process_partial [label="buf_len + b.len ≥ 64"];

    process_full_blocks [label="处理完整中间块"];
    process_partial -> process_full_blocks;

    handle_remainder [label="复制剩余数据到缓冲区"];
    process_full_blocks -> handle_remainder;

    update_end [label="更新 total_len"];
    handle_remainder -> update_end;

    // Final 过程
    final [label="生成最终摘要\n(final)"];
    update_end -> final;

    // Final 内部逻辑
    add_padding [label="添加填充位 (0x80)"];
    final -> add_padding;

    check_padding_space [label="检查剩余空间是否足够"];
    add_padding -> check_padding_space;

    extra_round [label="执行额外块处理"];
    check_padding_space -> extra_round [label="空间不足"];

    add_length [label="添加消息长度"];
    extra_round -> add_length;
    check_padding_space -> add_length [label="空间足够"];

    final_round [label="处理最终块"];
    add_length -> final_round;

    output_result [label="输出摘要结果"];
    final_round -> output_result;

    // Round 函数分支
    round [label="处理数据块 (round)"];
    process_partial -> round;
    process_full_blocks -> round;

    // Round 内部优化路径
    check_arch [label="检查CPU架构优化"];
    round -> check_arch;

    aarch64_path [label="AArch64 SHA2指令优化"];
    x86_path [label="x86_64 SHA指令优化"];
    generic_path [label="通用软件实现"];

    check_arch -> aarch64_path [label="aarch64+sha2"];
    check_arch -> x86_path [label="x86_64+sha+avx2"];
    check_arch -> generic_path [label="其他情况"];

    // 连接结束节点
    output_result -> end;
    end [label="返回最终摘要", shape=ellipse];
}
