
digraph flowchart {
    node [shape=rectangle, fontname="Courier", fontsize=12]
    edge [fontname="Courier", fontsize=10]

    start [label="开始"]
    find_quote [label="跳过前导引号或单引号"]
    check_escape [label="检查是否存在转义字符或制表符"]
    alloc_mem [label="分配内存（source.len * 2）"]
    init_state [label="初始化状态为start"]
    loop_start [label="遍历source每个字符"]
    handle_state [label="处理当前状态"]
    handle_escape [label="处理转义字符"]
    handle_hex [label="处理十六进制转义"]
    handle_octal [label="处理八进制转义"]
    format_num [label="格式化数字到缓冲区"]
    error_handling [label="错误处理"]
    final_format [label="处理未完成的hex/octal"]
    return_result [label="返回结果"]

    start -> find_quote
    find_quote -> check_escape
    check_escape -> alloc_mem [label="存在转义字符"]
    check_escape -> return_result [label="无转义字符"]
    alloc_mem -> init_state
    init_state -> loop_start
    loop_start -> handle_state [label="处理字符c"]
    
    handle_state -> handle_escape [label="state=escape"]
    handle_state -> handle_start [label="state=start"]
    handle_state -> handle_hex [label="state=hex"]
    handle_state -> handle_octal [label="state=octal"]
    
    handle_start -> loop_start [label="处理普通字符"]
    handle_start -> handle_escape [label="遇到'\\'"]
    
    handle_escape -> error_handling [label="未知转义或unicode"]
    handle_escape -> loop_start [label="完成转义处理"]
    
    handle_hex -> format_num [label="非十六进制字符"]
    handle_hex -> error_handling [label="溢出"]
    
    handle_octal -> format_num [label="非八进制字符或count=3"]
    handle_octal -> error_handling [label="溢出"]
    
    format_num -> loop_start
    
    error_handling -> return_error [label="返回错误"]
    
    loop_start -> final_format [label="循环结束"]
    final_format -> return_result
    return_result [label="返回bytes[0..i]"]
    return_error [label="返回错误", shape=ellipse]
}
