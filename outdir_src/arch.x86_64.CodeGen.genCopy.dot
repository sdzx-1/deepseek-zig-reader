
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];

    start [label="开始 genCopy"];
    lock_src_reg [label="锁定源寄存器（如果存在）"];
    defer_unlock [label="定义 defer 解锁源寄存器"];
    switch_dst_mcv [label="根据 dst_mcv 类型分支"];

    // 主要分支节点
    register [label="dst_mcv 是寄存器"];
    register_offset [label="dst_mcv 是寄存器偏移"];
    inline_reg_group [label="dst_mcv 是寄存器组\n(pair/triple/quadruple)"];
    indirect [label="dst_mcv 是间接寻址"];
    memory_load [label="dst_mcv 是内存/符号加载"];
    load_frame [label="dst_mcv 是帧加载"];

    // 分支处理逻辑
    register -> gen_set_reg [label="调用 genSetReg"];
    register_offset -> adjust_offset [label="调整 src_mcv 偏移"];
    adjust_offset -> gen_set_reg_offset;

    inline_reg_group -> check_src_type [label="处理多寄存器场景"];
    check_src_type -> src_is_register [label="源是寄存器"];
    src_is_register -> generate_avx [label="支持 AVX"];
    generate_avx -> return;
    src_is_register -> generate_sse [label="支持 SSE4.1"];
    generate_sse -> return;
    src_is_register -> fallback_sse [label="传统 SSE"];
    fallback_sse -> return;

    check_src_type -> src_is_reg_group [label="源是同类型寄存器组"];
    src_is_reg_group -> swap_registers [label="处理寄存器冲突"];
    swap_registers -> return;

    check_src_type -> src_is_symbol [label="源是符号地址"];
    src_is_symbol -> load_addr_reg [label="分配地址寄存器"];
    load_addr_reg -> gen_part_access [label="分块访问"];

    inline_reg_group -> part_loop [label="分块处理循环"];
    part_loop -> emit_hazard [label="分两次处理危险寄存器"];
    emit_hazard -> gen_set_reg_part [label="生成部分寄存器设置"];
    gen_set_reg_part -> loop_end;

    indirect -> gen_set_mem [label="调用 genSetMem"];
    memory_load -> check_address [label="处理内存地址"];
    check_address -> small_addr [label="32位地址直接使用"];
    small_addr -> gen_set_mem;
    check_address -> large_addr [label="分配临时地址寄存器"];
    large_addr -> gen_set_mem_temp;

    load_frame -> gen_set_mem_frame [label="用帧地址调用 genSetMem"];

    // 公共出口
    return [label="返回"];
    loop_end -> return;
    gen_set_reg -> return;
    gen_set_reg_offset -> return;
    gen_set_mem -> return;
    gen_set_mem_temp -> return;
    gen_set_mem_frame -> return;

    // 连接主流程
    start -> lock_src_reg -> defer_unlock -> switch_dst_mcv;
    switch_dst_mcv -> register;
    switch_dst_mcv -> register_offset;
    switch_dst_mcv -> inline_reg_group;
    switch_dst_mcv -> indirect;
    switch_dst_mcv -> memory_load;
    switch_dst_mcv -> load_frame;
}
