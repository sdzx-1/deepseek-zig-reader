
digraph analyzeNavType {
    node [shape=rectangle, fontname="Courier", fontsize=10];
    edge [fontname="Courier", fontsize=10];

    start [label="开始 analyzeNavType"];
    init_vars [label="初始化变量: zcu, gpa, ip, old_nav"];
    check_inst_resolved [label="inst_resolved 有效?", shape=diamond];
    error_analysis_fail [label="返回 error.AnalysisFail"];
    put_analysis_in_progress [label="将 anal_unit 加入 analysis_in_progress"];
    create_arena [label="创建 analysis_arena 和 comptime_err_ret_trace"];
    init_sema [label="初始化 Sema 和 Block 结构体"];
    check_zir_decl_kind [label="zir_decl.kind 是 usingnamespace?", shape=diamond];
    check_type_body [label="type_body 存在?", shape=diamond];
    declare_dependency_nav_val [label="声明依赖到 nav_val\n调用 ensureNavValUpToDate"];
    return_true_early [label="返回 { type_changed: true }"];
    resolve_type [label="解析类型 resolved_ty"];
    resolve_modifiers [label="解析修饰符 modifiers"];
    check_const_extern [label="确定 is_const 和 is_extern_decl"];
    compare_changes [label="比较新旧类型/修饰符是否变化", shape=diamond];
    update_ip [label="调用 ip.resolveNavType 更新"];
    return_true [label="返回 { type_changed: true }"];
    return_false [label="返回 { type_changed: false }"];
    defer_cleanup [label="执行 defer 清理操作"];

    start -> init_vars;
    init_vars -> check_inst_resolved;
    check_inst_resolved -> error_analysis_fail [label="否"];
    check_inst_resolved -> put_analysis_in_progress [label="是"];
    put_analysis_in_progress -> create_arena;
    create_arena -> init_sema;
    init_sema -> check_zir_decl_kind;
    check_zir_decl_kind -> check_type_body [label="usingnamespace"];
    check_type_body -> declare_dependency_nav_val [label="不存在"];
    declare_dependency_nav_val -> return_true_early;
    check_type_body -> resolve_type [label="存在"];
    resolve_type -> resolve_modifiers;
    resolve_modifiers -> check_const_extern;
    check_const_extern -> compare_changes;
    compare_changes -> update_ip [label="有变化"];
    compare_changes -> return_false [label="无变化"];
    update_ip -> return_true;
    return_true_early -> defer_cleanup [label="(隐含流程)"];
    return_true -> defer_cleanup;
    return_false -> defer_cleanup;
    defer_cleanup -> end;

    // 隐式错误路径
    error_analysis_fail -> end;
    
    end [label="结束", shape=ellipse];
}
