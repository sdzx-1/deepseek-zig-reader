
digraph ParamIteratorFlow {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];

    start [label="ParamIterator初始化\n(bytes, idx=0, next_is_sub=false, is_empty=false)"];
    next_start [label="调用 next()"];
    reset_state [label="重置状态:\nnext_is_sub = false\nis_empty = false"];
    check_idx [label="idx < bytes.len?" shape=diamond];
    process_char [label="读取当前字节 b = bytes[idx]"];
    is_digit [label="b 是 0x30-0x39 (数字)?" shape=diamond];
    update_val [label="val = val * 10 + (b - 0x30)\n检查是否是最后一个字符"];
    last_char [label="返回 val" shape=oval];
    is_separator [label="b 是 ':' 或 ';'?" shape=diamond];
    set_flags [label="设置:\nnext_is_sub = (b == ':')\nis_empty = (idx == start)\n返回 val" shape=oval];
    invalid_char [label="返回 null" shape=oval];
    end_of_loop [label="循环结束\n返回 null" shape=oval];
    hasAtLeast_start [label="调用 hasAtLeast(n)"];
    save_idx [label="保存当前 idx 到 start"];
    temp_next [label="调用 next()"];
    count_check [label="计数 i += 1\ni >= n?" shape=diamond];
    restore_idx [label="恢复 idx = start\n返回 true" shape=oval];
    restore_fail [label="恢复 idx = start\n返回 false" shape=oval];

    start -> next_start;
    next_start -> reset_state;
    reset_state -> check_idx;
    check_idx -> process_char [label="是"];
    check_idx -> end_of_loop [label="否"];
    process_char -> is_digit;
    is_digit -> update_val [label="是"];
    is_digit -> is_separator [label="否"];
    update_val -> last_char [label="是最后一个字符"];
    update_val -> check_idx [label="否则继续循环"];
    is_separator -> set_flags [label="是"];
    is_separator -> invalid_char [label="否"];
    
    hasAtLeast_start -> save_idx;
    save_idx -> temp_next;
    temp_next -> count_check [label="成功获取"];
    count_check -> restore_idx [label="i >= n"];
    count_check -> temp_next [label="继续循环"];
    temp_next -> restore_fail [label="无法获取更多"];
}
