
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];

    start [label="开始 airClz"];
    check_vector [label="检查 src_ty 是否为向量类型"];
    handle_vector_error [label="返回错误：未实现向量处理"];
    resolve_operand [label="解析操作数 src_mcv"];
    materialize_src [label="将立即数 src_mcv 复制到寄存器"];
    alloc_dst_reg [label="分配目标寄存器 dst_reg"];
    check_src_bits_size [label="检查 src_bits 大小"];
    handle_128plus_bits [label="处理 >128位情况\n生成循环查找前导零"];
    handle_lzcnt [label="支持 lzcnt 指令的分支"];
    handle_bsr [label="使用 BSR+CMOV 的分支"];
    finish [label="finishAir 返回结果"];

    start -> check_vector;
    check_vector -> handle_vector_error [label="是向量类型"];
    check_vector -> resolve_operand [label="非向量类型"];
    resolve_operand -> materialize_src [label="src_mcv 是立即数"];
    resolve_operand -> alloc_dst_reg [label="其他情况"];
    materialize_src -> alloc_dst_reg;
    alloc_dst_reg -> check_src_bits_size;
    
    check_src_bits_size -> handle_128plus_bits [label="src_bits > 128"];
    check_src_bits_size -> handle_lzcnt [label="支持 lzcnt 且 ≤64/128位"];
    check_src_bits_size -> handle_bsr [label="不支持 lzcnt 且 ≤64位"];
    
    handle_128plus_bits -> finish [label="生成循环代码\n计算前导零"];
    handle_lzcnt -> finish [label="生成 lzcnt 指令链"];
    handle_bsr -> finish [label="生成 BSR+CMOV 指令链"];
    
    handle_vector_error -> finish [label="直接返回错误"];
    finish [shape=ellipse];
    
    // 子流程展开示例
    subgraph cluster_128plus {
        label="处理 >128位流程";
        loop_start [label="初始化索引寄存器\n设置初始计数"];
        loop_test [label="测试索引寄存器"];
        loop_body [label="递减索引\n比较内存值\n跳转循环"];
        loop_end [label="找到非零值\n计算最终结果"];
        handle_128plus_bits -> loop_start;
        loop_start -> loop_test;
        loop_test -> loop_body [label="非零"];
        loop_body -> loop_test;
        loop_test -> loop_end [label="为零"];
    }
    
    subgraph cluster_lzcnt {
        label="lzcnt 分支细节";
        lzcnt_small [label="处理 ≤8位\n扩展寄存器"];
        lzcnt_medium [label="处理 ≤64位\n直接 lzcnt"];
        lzcnt_large [label="处理 128位\n分高低64位计算"];
        handle_lzcnt -> lzcnt_small [label="≤8位"];
        handle_lzcnt -> lzcnt_medium [label="≤64位"];
        handle_lzcnt -> lzcnt_large [label="≤128位"];
    }
}
