
digraph buildCrtFile {
    graph [fontname="Arial", bgcolor="transparent"];
    node [shape=rectangle, fontname="Arial", style="filled", fillcolor="lightgray"];
    edge [fontname="Arial"];

    start [label="开始 buildCrtFile"];
    check_llvm [label="检查 build_options.have_llvm"];
    error_llvm [label="返回错误\nZigCompilerNotBuiltWithLLVMExtensions", shape="diamond", fillcolor="pink"];
    init_allocators [label="初始化 arena_allocator 和 arena"];

    start -> check_llvm;
    check_llvm -> error_llvm [label="false"];
    check_llvm -> init_allocators [label="true"];

    subgraph cluster_crtfile {
        label="根据 crt_file 类型分发";
        node [style="filled", fillcolor="lightblue"];

        init_allocators -> switch_crt_file;
        switch_crt_file [label="switch(crt_file)", shape="diamond", fillcolor="lightyellow"];

        { rank=same;
            crt1_reactor [label="crt1_reactor_o"];
            crt1_command [label="crt1_command_o"];
            libc_a [label="libc_a"];
            libdl_a [label="libdl_a"];
            wasi_clocks [label="libwasi_emulated_process_clocks_a"];
            wasi_getpid [label="libwasi_emulated_getpid_a"];
            wasi_mman [label="libwasi_emulated_mman_a"];
            wasi_signal [label="libwasi_emulated_signal_a"];
        }

        switch_crt_file -> {
            crt1_reactor,
            crt1_command,
            libc_a,
            libdl_a,
            wasi_clocks,
            wasi_getpid,
            wasi_mman,
            wasi_signal
        } [label="分支选择"];

        // 各 case 的处理逻辑
        subgraph cluster_reactor {
            label="crt1_reactor_o";
            crt1_reactor -> reactor_args [label="构建参数"];
            reactor_args [label="初始化 args\naddCCArgs\naddLibcBottomHalfIncludes"];
            reactor_files [label="创建 CSourceFile 数组\n指定源文件路径"];
            reactor_args -> reactor_files;
            reactor_build [label="调用 comp.build_crt_file\n生成 crt1-reactor"];
            reactor_files -> reactor_build;
        }

        subgraph cluster_libc_a {
            label="libc_a";
            libc_a -> emmalloc [label="编译 emmalloc"];
            emmalloc [label="添加编译参数\nwant_O3/no_strict_aliasing\n处理 emmalloc_src_files"];
            
            libc_a -> libc_bottom [label="编译 libc-bottom-half"];
            libc_bottom [label="添加编译参数\nwant_O3\n处理 libc_bottom_half_src_files"];
            
            libc_a -> libc_top [label="编译 libc-top-half"];
            libc_top [label="添加编译参数\nwant_O3\n处理 libc_top_half_src_files"];
            
            libc_a -> build_libc [label="合并所有源文件"];
            build_libc [label="调用 comp.build_crt_file\n生成 libc.a"];
        }

        // 其他 case 的简略表示（结构类似）
        wasi_signal -> signal_bottom [label="编译 bottom half"];
        signal_bottom [label="添加编译参数\n处理 emulated_signal_bottom_half_src_files"];
        wasi_signal -> signal_top [label="编译 top half"];
        signal_top [label="添加编译参数\n-D_WASI_EMULATED_SIGNAL\n处理 emulated_signal_top_half_src_files"];
        signal_build [label="调用 comp.build_crt_file\n生成 libwasi-emulated-signal.a"];
        signal_top -> signal_build;
        signal_bottom -> signal_build;

        // 公共结束节点
        reactor_build -> end;
        build_libc -> end;
        signal_build -> end;
    }

    end [label="返回编译结果", shape="doublecircle"];
}
