
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];
    
    start [label="开始 updateComptimeNavInner"];
    init_vars [label="初始化变量\nzcu, ip, nav_src_loc, nav_val"];
    check_test [label="检查是否是测试声明"];
    is_test [label="返回"];
    init_wip_nav [label="初始化 wip_nav 结构体\ndefer 清理"];
    get_nav_gop [label="获取或创建 nav_gop 条目"];
    handle_switch [label="根据 nav_val 类型进行分支"];

    // 分支处理节点
    struct_type [label="处理结构体类型"];
    enum_type [label="处理枚举类型"];
    union_type [label="处理联合体类型"];
    func_type [label="处理函数类型"];
    default_type [label="默认类型处理"];

    // 公共流程
    decl_common [label="调用 declCommon"];
    update_debug_info [label="更新调试信息条目"];
    handle_lazy [label="更新延迟引用"];
    end [label="结束"];

    // 结构体子流程
    struct_layout [label="处理结构体布局\n(auto/extern/packed)"];
    struct_fields [label="遍历结构体字段\n生成字段调试信息"];
    struct_end [label="结束结构体处理"];

    // 枚举子流程
    enum_fields [label="遍历枚举字段\n生成枚举常量"];
    enum_end [label="结束枚举处理"];

    // 联合体子流程
    union_layout [label="处理联合体布局\n(含标签或无标签)"];
    union_fields [label="遍历联合体字段\n生成字段调试信息"];
    union_end [label="结束联合体处理"];

    // 函数子流程
    func_params [label="处理函数参数\n生成参数调试信息"];
    func_end [label="结束函数处理"];

    // 错误处理
    errdefer [label="错误处理回滚", color=red];

    // 连接节点
    start -> init_vars -> check_test;
    check_test -> is_test [label="是测试"];
    check_test -> init_wip_nav [label="不是测试"];
    init_wip_nav -> get_nav_gop -> handle_switch;

    handle_switch -> struct_type [label="struct_type"];
    handle_switch -> enum_type [label="enum_type"];
    handle_switch -> union_type [label="union_type"];
    handle_switch -> func_type [label="func"];
    handle_switch -> default_type [label="其他类型"];

    // 结构体分支
    struct_type -> struct_layout;
    struct_layout -> struct_fields -> struct_end -> decl_common;
    struct_end -> update_debug_info;

    // 枚举分支
    enum_type -> enum_fields -> enum_end -> decl_common;
    enum_end -> update_debug_info;

    // 联合体分支
    union_type -> union_layout -> union_fields -> union_end -> decl_common;
    union_end -> update_debug_info;

    // 函数分支
    func_type -> func_params -> func_end -> decl_common;
    func_end -> update_debug_info;

    // 公共流程
    decl_common -> update_debug_info -> handle_lazy -> end;

    // 错误处理连接
    get_nav_gop -> errdefer [label="errdefer", color=red];
    handle_switch -> errdefer [color=red];
    struct_type -> errdefer [color=red];
    enum_type -> errdefer [color=red];
    union_type -> errdefer [color=red];
    func_type -> errdefer [color=red];
    default_type -> errdefer [color=red];
}
