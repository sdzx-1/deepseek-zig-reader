
digraph writeToPackedMemory {
    graph [fontname="Arial", nodesep=0.5];
    node [fontname="Arial", shape=rectangle];
    edge [fontname="Arial"];

    start [label="开始 writeToPackedMemory", shape=ellipse];
    end [label="返回", shape=ellipse];
    check_undef [label="val.isUndef(zcu)?"];
    handle_undef [label="写入0到缓冲区\n根据bit_size"];
    type_switch [label="切换 ty.zigTypeTag(zcu)", shape=diamond];
    
    start -> check_undef;
    
    // Undefined 处理分支
    check_undef -> handle_undef [label="是"];
    handle_undef -> end;
    
    check_undef -> type_switch [label="否"];
    
    // 类型分支
    type_switch -> bool [label=".bool"];
    type_switch -> int_enum [label=".int/.enum"];
    type_switch -> float [label=".float"];
    type_switch -> vector [label=".vector"];
    type_switch -> struct_node [label=".struct"];
    type_switch -> union_node [label=".union"];
    type_switch -> pointer [label=".pointer"];
    type_switch -> optional [label=".optional"];
    type_switch -> void [label=".void"];
    type_switch -> panic [label="其他类型"];
    
    // Bool 处理
    bool -> bool_calculation [label="计算字节位置"];
    bool_calculation -> end;
    
    // Int/Enum 处理
    subgraph cluster_int {
        int_enum -> int_storage [label="匹配存储类型"];
        int_storage -> write_u64_i64 [label="u64/i64"];
        int_storage -> write_bigint [label="big_int"];
        int_storage -> write_lazy_align [label="lazy_align"];
        int_storage -> write_lazy_size [label="lazy_size"];
    }
    write_u64_i64 -> end;
    write_bigint -> end;
    write_lazy_align -> end;
    write_lazy_size -> end;
    
    // Float 处理
    float -> float_switch [label="根据bit大小"];
    float_switch -> end;
    
    // Vector 处理
    subgraph cluster_vector {
        vector -> elem_loop [label="遍历每个元素"];
        elem_loop -> reverse_order [label="大端序反转索引"];
        reverse_order -> recursive_write [label="递归写入元素"];
    }
    recursive_write -> end;
    
    // Struct 处理
    struct_node -> struct_loop [label="遍历字段"];
    struct_loop -> field_write [label="递归写入字段值"];
    field_write -> end;
    
    // Union 处理
    union_node -> union_layout [label="检查布局"];
    union_layout -> union_tag [label="packed"];
    union_tag -> field_write_union [label="存在tag"];
    union_tag -> backing_type [label="无tag"];
    field_write_union -> end;
    backing_type -> end;
    
    // Pointer 处理
    pointer -> check_addr_tag [label="检查地址标签"];
    check_addr_tag -> write_usize [label="int类型"];
    check_addr_tag -> error_ref [label="非int类型"];
    write_usize -> end;
    error_ref [label="返回 ReinterpretDeclRef 错误"];
    
    // Optional 处理
    optional -> check_opt_val [label="检查是否有值"];
    check_opt_val -> write_child [label="有值"];
    check_opt_val -> write_zero [label="无值"];
    write_child -> end;
    write_zero -> end;
    
    // 其他分支
    void -> end;
    panic [label="@panic(\"TODO\")", shape=octagon];
    
    // 错误处理
    error_ref -> end [style=dashed, color=red];
}
