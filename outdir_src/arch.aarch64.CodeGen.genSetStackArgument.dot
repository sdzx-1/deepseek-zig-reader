
digraph flowchart {
    node [shape=box, style="rounded", fontname="Helvetica"];
    edge [fontname="Helvetica"];

    start [label="开始 genSetStackArgument"];
    end [label="返回/结束"];

    start -> check_mcv;

    check_mcv [label="检查 mcv 类型"];
    check_mcv -> case_dead [label=".dead"];
    check_mcv -> case_none_unreach [label=".none/.unreach"];
    check_mcv -> case_undef [label=".undef"];
    check_mcv -> case_register [label=".register"];
    check_mcv -> case_register_overflow [label=".register_with_overflow"];
    check_mcv -> case_memory_group [label=".linker_load/.memory/\n.stack_argument_offset/\n.stack_offset"];
    check_mcv -> case_compare_immediate [label=".compare_flags/\n.immediate/\n.ptr_stack_offset"];

    // Dead case
    case_dead [label="unreachable"];
    case_dead -> end;

    // None/Unreach case
    case_none_unreach [label="直接返回"];
    case_none_unreach -> end;

    // Undef case
    case_undef [label="安全检查通过?\n(wantSafety)"];
    case_undef -> undef_safe [label="是"];
    case_undef -> end [label="否"];
    
    undef_safe [label="根据abi_size选择模式"];
    undef_safe -> gen_imm_1 [label="1 → 0xaa"];
    undef_safe -> gen_imm_2 [label="2 → 0xaaaa"];
    undef_safe -> gen_imm_4 [label="4 → 0xaaaaaaaa"];
    undef_safe -> gen_imm_8 [label="8 → 0xaaaaaaaaaaaaaaaa"];
    undef_safe -> fail_memset [label="其他 → 失败"];
    
    gen_imm_1 [label="调用genSetStack"];
    gen_imm_1 -> end;
    gen_imm_2 [label="调用genSetStack"];
    gen_imm_2 -> end;
    gen_imm_4 [label="调用genSetStack"];
    gen_imm_4 -> end;
    gen_imm_8 [label="调用genSetStack"];
    gen_imm_8 -> end;
    fail_memset [label="触发TODO错误"];
    fail_memset -> end;

    // Register case
    case_register [label="处理寄存器存储"];
    case_register -> check_abi_size;
    
    check_abi_size [label="abi_size 是否合法?\n(1/2/4/8)"];
    check_abi_size -> calc_offset [label="是"];
    check_abi_size -> fail_abi_size [label="否"];
    
    calc_offset [label="计算栈偏移量"];
    calc_offset -> check_offset_valid;
    
    check_offset_valid [label="偏移量是否可编码?"];
    check_offset_valid -> gen_store [label="是"];
    check_offset_valid -> fail_offset [label="否"];
    
    gen_store [label="生成STR指令"];
    gen_store -> end;
    fail_abi_size [label="触发TODO错误"];
    fail_abi_size -> end;
    fail_offset [label="触发TODO错误"];
    fail_offset -> end;

    // Register with overflow
    case_register_overflow [label="触发TODO错误"];
    case_register_overflow -> end;

    // Memory group cases
    case_memory_group [label="处理内存复制逻辑"];
    case_memory_group -> check_abi_size_le4 [label="abi_size ≤4?"];
    
    check_abi_size_le4 [label="abi_size ≤4?"];
    check_abi_size_le4 -> copy_to_tmp_reg [label="是"];
    check_abi_size_le4 -> memcpy_logic [label="否"];
    
    copy_to_tmp_reg [label="复制到临时寄存器"];
    copy_to_tmp_reg -> recursive_call [label="递归调用genSetStackArgument"];
    recursive_call -> end;
    
    memcpy_logic [label="准备memcpy参数"];
    memcpy_logic -> setup_src_dst [label="设置源/目标寄存器"];
    setup_src_dst -> gen_add_inst [label="生成地址指令"];
    gen_add_inst -> gen_inline_memcpy [label="调用genInlineMemcpy"];
    gen_inline_memcpy -> end;

    // Immediate cases
    case_compare_immediate [label="复制到临时寄存器"];
    case_compare_immediate -> copy_to_tmp_reg_imm [label="调用copyToTmpRegister"];
    copy_to_tmp_reg_imm -> recursive_call_imm [label="递归调用genSetStackArgument"];
    recursive_call_imm -> end;

    edge [style=dashed, color=grey];
    {rank=same; case_undef undef_safe}
    {rank=same; check_abi_size calc_offset}
    {rank=same; case_memory_group check_abi_size_le4}
}
