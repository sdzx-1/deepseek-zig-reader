
digraph abiSizeInner {
    graph [fontname="Arial", nodesep=0.5, ranksep=1];
    node [fontname="Arial", shape=rectangle, style=filled, fillcolor="#f0f0f0"];
    edge [fontname="Arial"];

    start [label="Start abiSizeInner", shape=ellipse];
    end [label="Return result", shape=ellipse];

    subgraph cluster_main {
        label="Main Logic";
        start -> get_target_ip [label="Get target & intern pool"];
        get_target_ip -> switch_ty_intern [label="Switch ty.toIntern()"];
        
        switch_ty_intern [label="Switch ty.toIntern()"];
        switch_ty_intern -> empty_tuple [label="empty_tuple_type"];
        switch_ty_intern -> ip_index_key [label="Else (ip.indexToKey)"];
        
        empty_tuple [label="Return scalar=0"];
        empty_tuple -> end;

        ip_index_key [label="Switch ip.indexToKey"];
        ip_index_key -> int_type [label="int_type"];
        ip_index_key -> ptr_type [label="ptr_type"];
        ip_index_key -> array_type [label="array_type"];
        ip_index_key -> vector_type [label="vector_type"];
        ip_index_key -> error_union_type [label="error_union_type"];
        ip_index_key -> struct_type [label="struct_type"];
        ip_index_key -> other_cases [label="Other cases..."];

        int_type [label="Compute intAbiSize(bits, target)"];
        int_type -> end;

        ptr_type [label="Compute ptrBitWidth/8"];
        ptr_type -> end;

        array_type [label="Recursive elem_size\nÃ— array length"];
        array_type -> end;

        vector_type [label="Calculate alignment\nand total_bytes"];
        vector_type -> end;

        error_union_type [label="Compute code_size\npayload_size + alignment"];
        error_union_type -> end;

        struct_type [label="Resolve struct layout\npacked/auto/extern"];
        struct_type -> end;

        other_cases [label="Handles:\nopt_type, enum_type,\nerror_set_type, etc."];
        other_cases -> end;
    }

    subgraph cluster_strat_handling {
        label="Strategy Handling";
        color=blue;
        
        array_type_strat [label="Strat check\n(lazy returns val)"];
        vector_type_strat [label="Strat check\n(lazy returns val)"];
        error_union_strat [label="Strat check\n(lazy returns val)"];
        
        array_type -> array_type_strat [style=dotted];
        vector_type -> vector_type_strat [style=dotted];
        error_union_type -> error_union_strat [style=dotted];
        
        array_type_strat -> strat_val [label=".lazy"];
        vector_type_strat -> strat_val [label=".lazy"];
        error_union_strat -> strat_val [label=".lazy"];
        
        strat_val [label="Return .val\n(lazy_size)"];
        strat_val -> end;
    }

    start -> get_target_ip;
    get_target_ip -> switch_ty_intern;
    switch_ty_intern -> ip_index_key [label="Else"];
    ip_index_key -> other_cases [label="Other types"];
    other_cases -> end;
}
