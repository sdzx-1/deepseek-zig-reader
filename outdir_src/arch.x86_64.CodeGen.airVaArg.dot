
digraph airVaArg {
    node [shape=rectangle, fontname="Courier", fontsize=10];
    edge [fontname="Courier", fontsize=10];

    start [label="开始 airVaArg"];
    check_cc [label="检查调用约定", shape=diamond];
    sysv_case [label="处理 x86_64_sysv"];
    win_case [label="返回失败: TODO Win64"];
    other_cc [label="返回失败: 不支持var args"];
    classify_type [label="分类参数类型 (integer/sse/memory)", shape=diamond];
    handle_integer [label="处理整数类型"];
    handle_sse [label="处理SSE类型"];
    handle_memory [label="unreachable内存类型"];
    other_type [label="返回失败: 未实现类型"];
    unused_check [label="检查是否未使用(unused)", shape=diamond];
    promote_check [label="检查类型提升"];
    copy_result [label="复制结果到目标"];
    finish [label="结束并返回结果"];

    start -> check_cc;
    check_cc -> sysv_case [label=".x86_64_sysv"];
    check_cc -> win_case [label=".x86_64_win"];
    check_cc -> other_cc [label="其他调用约定"];

    sysv_case -> classify_type;
    classify_type -> handle_integer [label="integer"];
    classify_type -> handle_sse [label="sse"];
    classify_type -> handle_memory [label="memory"];
    classify_type -> other_type [label="其他类型"];

    handle_integer -> unused_check;
    handle_sse -> unused_check;
    handle_memory -> finish [label="触发unreachable"];
    other_type -> finish [label="返回错误"];

    unused_check -> promote_check [label="未使用? no"];
    unused_check -> finish [label="未使用? yes"];

    promote_check -> copy_result [label="需要类型转换"];
    promote_check -> finish [label="类型相同"];

    copy_result -> finish;

    win_case -> finish;
    other_cc -> finish;
}
