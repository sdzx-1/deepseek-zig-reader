
digraph flowchart {
    node [shape=ellipse, style=filled, color=lightblue];
    start [label="开始 airOverflow"];
    end [label="返回结果 finishAir"];

    node [shape=rectangle, style=rounded, color=black];
    extract_data [label="提取指令标签、类型和额外数据"];
    check_unused [label="检查结果是否未使用"];
    mark_dead [label="标记结果为 .dead"];
    handle_vector [label="处理向量类型，返回未实现错误"];
    handle_int [label="处理整数类型"];
    small_int_case [label="1-31/33-63位整数"];
    alloc_stack [label="分配栈空间"];
    spill_flags [label="处理比较标志"];
    gen_add_sub [label="生成加减指令"];
    trunc_register [label="截断寄存器"];
    cmp_truncated [label="比较寄存器和截断值"];
    set_stack [label="设置栈上的结果和溢出位"];
    large_int_case [label="32/64位整数"];
    resolve_immediate [label="解析立即数"];
    check_commutative [label="检查操作是否可交换"];
    gen_immediate_op [label="生成立即数操作"];
    gen_register_op [label="生成寄存器操作"];
    set_overflow_flag [label="设置溢出条件标志"];

    node [shape=diamond, color=darkgreen];
    is_vector [label="类型是否为向量？"];
    is_unused [label="结果是否未使用？"];
    bits_range [label="整数位数范围？"];
    lhs_immediate_ok [label="lhs是立即数且可交换？"];
    rhs_immediate_ok [label="rhs是立即数？"];

    start -> extract_data;
    extract_data -> check_unused;
    
    check_unused -> is_unused;
    is_unused:w -> mark_dead [label="是"];
    is_unused:e -> is_vector [label="否"];
    
    is_vector -> handle_vector [label="是"];
    is_vector -> handle_int [label="否"];
    
    handle_int -> bits_range;
    bits_range -> small_int_case [label="1-31/33-63"];
    bits_range -> large_int_case [label="32/64"];
    bits_range -> fail [label="其他，返回错误"];
    
    small_int_case -> alloc_stack;
    alloc_stack -> spill_flags;
    spill_flags -> gen_add_sub;
    gen_add_sub -> trunc_register;
    trunc_register -> cmp_truncated;
    cmp_truncated -> set_stack;
    set_stack -> end;
    
    large_int_case -> resolve_immediate;
    resolve_immediate -> check_commutative;
    check_commutative -> lhs_immediate_ok [label="加法可交换"];
    check_commutative -> rhs_immediate_ok [label="其他"];
    
    rhs_immediate_ok -> gen_immediate_op [label="是"];
    rhs_immediate_ok -> lhs_immediate_ok [label="否"];
    
    lhs_immediate_ok -> gen_immediate_op [label="是"];
    lhs_immediate_ok -> gen_register_op [label="否"];
    
    gen_immediate_op -> set_overflow_flag;
    gen_register_op -> set_overflow_flag;
    set_overflow_flag -> end;
    
    handle_vector -> end;
    mark_dead -> end;
    
    fail [shape=rectangle, label="返回未实现错误"];
    fail -> end;
}
