
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];

    start [label="prepareComptimePtrStore 开始"];
    check_ptr_base [label="检查 ptr.base_addr 类型"];
    handle_nav_uav_int [label="返回 .runtime_store"];
    handle_comptime_field [label="返回 .comptime_field"];
    handle_comptime_alloc [label="构造 .direct 策略"];
    handle_eu_payload [label="处理 .eu_payload\n递归调用 prepareComptimePtrStore"];
    handle_opt_payload [label="处理 .opt_payload\n递归调用 prepareComptimePtrStore"];
    handle_arr_elem [label="处理 .arr_elem\n构造数组策略"];
    handle_field [label="处理 .field\n访问结构体/联合体字段"];
    check_byte_offset [label="ptr.byte_offset == 0?"];
    direct_strategy_check [label="检查直接策略有效性"];
    restructure_array_block [label="数组重构处理"];
    check_layout [label="检查内存布局有效性"];
    handle_reinterpret [label="构造 .reinterpret 策略"];
    final_check [label="最终类型匹配检查"];
    return_direct [label="返回 .direct 策略"];
    error_paths [label="错误路径处理\n(.undef, .out_of_bounds, .needed_well_defined 等)"];

    start -> check_ptr_base;
    
    check_ptr_base -> handle_nav_uav_int [label=".nav/.uav/.int"];
    check_ptr_base -> handle_comptime_field [label=".comptime_field"];
    check_ptr_base -> handle_comptime_alloc [label=".comptime_alloc"];
    check_ptr_base -> handle_eu_payload [label=".eu_payload"];
    check_ptr_base -> handle_opt_payload [label=".opt_payload"];
    check_ptr_base -> handle_arr_elem [label=".arr_elem"];
    check_ptr_base -> handle_field [label=".field"];
    
    handle_eu_payload -> check_ptr_base [label="递归调用"];
    handle_opt_payload -> check_ptr_base [label="递归调用"];
    
    check_ptr_base -> check_byte_offset [label="处理完 base_strat"];
    
    check_byte_offset -> direct_strategy_check [label="是"];
    check_byte_offset -> restructure_array_block [label="否"];
    
    direct_strategy_check -> return_direct [label="类型兼容"];
    direct_strategy_check -> restructure_array_block [label="不兼容"];
    
    restructure_array_block -> check_layout [label="数组重构失败"];
    
    check_layout -> handle_reinterpret [label="布局有效"];
    check_layout -> error_paths [label="布局无效"];
    
    handle_reinterpret -> final_check;
    
    final_check -> return_direct [label="偏移为0且类型匹配"];
    final_check -> handle_reinterpret [label="需要重新解释"];
    
    error_paths -> end;
    return_direct -> end;
    
    edge [style=dashed];
    handle_arr_elem -> check_ptr_base [label="可能递归调用"];
    handle_field -> check_ptr_base [label="可能递归调用"];
    
    end [label="返回对应策略", shape=oval];
}
