
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];

    start [label="开始: zirForLen 函数入口"];
    init_vars [label="初始化变量\n(len, len_val, len_idx, any_runtime)"];
    process_args [label="遍历参数对 (arg_pairs)"];
    check_arg_pair [label="参数对[0]是 .none?"];
    handle_indexable [label="处理索引对象\n检查类型是否可索引"];
    type_indexable [label="类型可索引?"];
    error_non_indexable [label="生成错误\n'类型不可索引'"];
    get_length [label="获取长度 (len/range计算)"];
    coerce_length [label="强制转换长度为 usize"];
    check_compile_time [label="能否在编译时确定长度?"];
    update_len [label="更新主长度 (len)\n记录 len_val 和 len_idx"];
    store_runtime_len [label="存储到 runtime_arg_lens\n标记 any_runtime = true"];
    loop_end [label="循环结束?"];
    check_unbounded [label="所有参数都无法确定长度?"];
    error_unbounded [label="生成错误\n'无界循环'"];
    runtime_checks [label="添加运行时安全检查\n(长度一致性检查)"];
    return_len [label="返回最终长度 len"];
    error_exit [label="错误处理出口"];

    start -> init_vars;
    init_vars -> process_args;
    process_args -> check_arg_pair;

    check_arg_pair -> handle_indexable [label="否"];
    check_arg_pair -> loop_end [label="是"];

    handle_indexable -> type_indexable;
    type_indexable -> error_non_indexable [label="否"];
    type_indexable -> get_length [label="是"];

    get_length -> coerce_length;
    coerce_length -> check_compile_time;

    check_compile_time -> update_len [label="是"];
    check_compile_time -> store_runtime_len [label="否"];

    update_len -> loop_end;
    store_runtime_len -> loop_end;

    loop_end -> process_args [label="继续循环"];
    loop_end -> check_unbounded [label="结束循环"];

    check_unbounded -> error_unbounded [label="是"];
    check_unbounded -> runtime_checks [label="否"];

    error_non_indexable -> error_exit;
    error_unbounded -> error_exit;
    
    runtime_checks -> return_len;
    
    // 隐式连接
    error_exit -> return_len [style=invis];
    return_len [shape=oval];
}
