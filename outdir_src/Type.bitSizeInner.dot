
digraph {
    node [shape=rectangle, fontname="Courier", fontsize=10];
    edge [fontname="Courier", fontsize=10];

    start [label="bitSizeInner(ty, strat, zcu, tid)"];
    get_target [label="const target = zcu.getTarget()"];
    get_ip [label="const ip = &zcu.intern_pool"];
    strat_lazy [label="const strat_lazy = strat.toLazy()"];
    switch_key [label="switch (ip.indexToKey(ty.toIntern()))", shape=diamond];

    // Basic setup
    start -> get_target -> get_ip -> strat_lazy -> switch_key;

    // Switch cases
    int_type [label=".int_type\nreturn int_type.bits"];
    ptr_type [label=".ptr_type\nswitch ptr_type.flags.size", shape=diamond];
    array_type [label=".array_type\ncompute len & elem_size"];
    vector_type [label=".vector_type\nchild_ty * len"];
    opt_type [label=".opt_type\nreturn abiSize * 8"];
    error_types [label=".error_set_type\nreturn zcu.errorSetBits()"];
    func_type [label=".func_type\nunreachable"];
    simple_type [label=".simple_type\nswitch (t)", shape=diamond];
    struct_type [label=".struct_type\ncheck packed layout"];
    union_type [label=".union_type\ncheck packed layout"];
    enum_type [label=".enum_type\nreturn tag_ty's bitSize"];
    unreachables [label="other cases\nunreachable"];

    // Connect main switch
    switch_key -> int_type [label="int_type"];
    switch_key -> ptr_type [label="ptr_type"];
    switch_key -> array_type [label="array_type"];
    switch_key -> vector_type [label="vector_type"];
    switch_key -> opt_type [label="opt_type"];
    switch_key -> error_types [label="error_set_type"];
    switch_key -> func_type [label="func_type"];
    switch_key -> simple_type [label="simple_type"];
    switch_key -> struct_type [label="struct_type"];
    switch_key -> union_type [label="union_type"];
    switch_key -> enum_type [label="enum_type"];
    switch_key -> unreachables [label="other values"];

    // Ptr_type sub-switch
    ptr_slice [label="flags.size == .slice\nreturn ptrBitWidth * 2"];
    ptr_default [label="else\nreturn ptrBitWidth"];
    ptr_type -> ptr_slice [label=".slice"];
    ptr_type -> ptr_default [label="else"];

    // Array_type logic
    array_check_len [label="len == 0?", shape=diamond];
    array_return_0 [label="return 0"];
    array_elem_size [label="elem_size = max(abiAlignment, abiSize)"];
    array_elem_bit [label="elem_bit_size = bitSizeInner(elem_ty)"];
    array_calc [label="(len-1)*8*elem_size + elem_bit_size"];
    
    array_type -> array_check_len;
    array_check_len -> array_return_0 [label="yes"];
    array_check_len -> array_elem_size [label="no"];
    array_elem_size -> array_elem_bit;
    array_elem_bit -> array_calc [label="return"];

    // Simple_type subcases
    simple_float [label="f16/f32/f64/f80/f128\nreturn 16/32/64/80/128"];
    simple_ptr [label="usize/isize\nreturn ptrBitWidth"];
    simple_c_types [label="c_char/c_short/etc\nreturn target.cTypeBitSize"];
    simple_bool [label="bool\nreturn 1"];
    simple_void [label="void\nreturn 0"];
    simple_error [label="anyerror\nreturn errorSetBits"];
    simple_unreach [label="anyopaque/type/etc\nunreachable"];
    
    simple_type -> simple_float [label=".f16 etc"];
    simple_type -> simple_ptr [label=".usize"];
    simple_type -> simple_c_types [label=".c_char etc"];
    simple_type -> simple_bool [label=".bool"];
    simple_type -> simple_void [label=".void"];
    simple_type -> simple_error [label=".anyerror"];
    simple_type -> simple_unreach [label="other simple types"];

    // Struct_type logic
    struct_check_packed [label="is_packed?", shape=diamond];
    struct_backing_int [label="return backingIntType's bitSize"];
    struct_abi [label="return abiSize * 8"];
    
    struct_type -> struct_check_packed;
    struct_check_packed -> struct_backing_int [label="yes"];
    struct_check_packed -> struct_abi [label="no"];

    // Union_type logic
    union_check_packed [label="is_packed?", shape=diamond];
    union_abi [label="return abiSize * 8"];
    union_calc_max [label="compute max(field_bitSize)"];
    
    union_type -> union_check_packed;
    union_check_packed -> union_abi [label="no"];
    union_check_packed -> union_calc_max [label="yes"];
    union_calc_max -> union_max_result [label="return max"];

    // Common termination
    int_type -> end;
    ptr_slice -> end;
    ptr_default -> end;
    array_return_0 -> end;
    array_calc -> end;
    vector_type -> end;
    opt_type -> end;
    error_types -> end;
    simple_float -> end;
    simple_ptr -> end;
    simple_c_types -> end;
    simple_bool -> end;
    simple_void -> end;
    simple_error -> end;
    struct_backing_int -> end;
    struct_abi -> end;
    union_abi -> end;
    union_calc_max -> end;
    enum_type -> end;

    end [label="Return u64", shape=ellipse];
}
