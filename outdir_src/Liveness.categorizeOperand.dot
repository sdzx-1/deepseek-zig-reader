
digraph flowchart {
    graph [rankdir=TB, fontname="Courier", fontsize=12];
    node [shape=rectangle, fontname="Courier", fontsize=10, style=filled, fillcolor=lightgray];
    edge [fontname="Courier", fontsize=10];

    start [label="categorizeOperand开始", shape=oval, fillcolor=skyblue];
    switch_inst [label="根据air_tags[inst]进行switch判断", shape=diamond, fillcolor=lightyellow];
    bin_ops [label="处理二元操作（add/sub/mul等）\n检查lhs/rhs是否为operand_ref", fillcolor=white];
    store_ops [label="处理存储类指令（store/atomic_store等）\n标记为.write", fillcolor=white];
    vector_store_elem [label="处理vector_store_elem\n检查vector_ptr和额外操作数", fillcolor=white];
    arg_alloc_etc [label="处理arg/alloc等简单指令\n直接返回.none", fillcolor=white];
    ty_op_unary [label="处理一元操作（not/bitcast等）\n检查ty_op.operand", fillcolor=white];
    ret_ops [label="处理ret/ret_safe等\n标记.noret", fillcolor=white];
    call_ops [label="处理call指令\n遍历参数并处理大tombstone", fillcolor=white];
    block_peephole [label="处理block/dbg_inline_block\n进行条件分支优化检查", fillcolor=white];
    complex_ops [label="复杂指令（try/loop/cond_br等）\n直接返回.complex", fillcolor=white];
    end [label="返回对应OperandCategory", shape=oval, fillcolor=skyblue];

    start -> switch_inst;
    switch_inst -> bin_ops [label="二元运算指令"];
    switch_inst -> store_ops [label="存储类指令"];
    switch_inst -> vector_store_elem [label="vector_store_elem"];
    switch_inst -> arg_alloc_etc [label="arg/alloc等"];
    switch_inst -> ty_op_unary [label="一元操作"];
    switch_inst -> ret_ops [label="ret指令"];
    switch_inst -> call_ops [label="call指令"];
    switch_inst -> block_peephole [label="block/dbg_inline_block"];
    switch_inst -> complex_ops [label="复杂控制流指令"];

    bin_ops -> end [label="返回.none或match结果"];
    store_ops -> end [label="返回.write或match结果"];
    vector_store_elem -> end [label="返回.write或match结果"];
    arg_alloc_etc -> end [label="返回.none"];
    ty_op_unary -> end [label="返回.none或match结果"];
    ret_ops -> end [label="返回.noret"];
    call_ops -> end [label="返回.write/.tomb"];
    block_peephole -> end [label="返回.complex/.tomb/.none"];
    complex_ops -> end [label="返回.complex"];
}
