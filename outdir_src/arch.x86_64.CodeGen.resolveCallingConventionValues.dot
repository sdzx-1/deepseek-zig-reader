
digraph flowchart {
    node [shape=rectangle, fontname="Courier", fontsize=10];
    edge [fontname="Courier", fontsize=10];

    start [label="开始 resolveCallingConventionValues"];
    init_vars [label="初始化变量\n(pt, zcu, ip, cc)"];
    alloc_param_types [label="分配 param_types 内存\n合并 fn_info.param_types 和 var_args"];
    init_result [label="初始化 result 结构体\n分配 args 数组"];
    switch_cc [label="根据调用约定(cc)选择分支", shape=diamond];

    // naked分支
    subgraph cluster_naked {
        label="case .naked";
        naked_checks [label="断言 args.len == 0\n设置 return_value = unreach\n根据架构设置 stack_align"];
    }

    // x86_64_sysv/x86_64_win分支
    subgraph cluster_sysv_win {
        label="case .x86_64_sysv/.x86_64_win";
        setup_ret [label="初始化返回寄存器计数器\n设置 stack_align"];
        ret_processing [label="处理返回值类型分类\n(整数/SSE/X87/内存等)"];
        param_loop [label="循环处理每个参数"];
        param_classes [label="分类参数类型\n(integer/sse/x87等)", shape=diamond];
        reg_alloc [label="分配寄存器或栈空间"];
        update_stack [label="更新栈大小和对齐"];
    }

    // auto分支
    subgraph cluster_auto {
        label="case .auto";
        setup_auto [label="设置 stack_align\n处理错误返回追踪寄存器"];
        auto_ret [label="处理返回值\n根据寄存器类型分配"];
        auto_param_loop [label="循环处理每个参数"];
        auto_reg_check [label="检查寄存器可用性\n分配寄存器或栈空间", shape=diamond];
    }

    // 公共流程
    final_adjust [label="对齐调整 stack_byte_count"];
    return [label="返回 result 结构体"];

    // 连接节点
    start -> init_vars -> alloc_param_types -> init_result -> switch_cc;
    
    switch_cc -> naked_checks [label=".naked"];
    switch_cc -> setup_ret [label=".x86_64_sysv/.x86_64_win"];
    switch_cc -> setup_auto [label=".auto"];
    switch_cc -> final_adjust [label="其他cc（未实现）"];

    naked_checks -> final_adjust;

    setup_ret -> ret_processing -> param_loop;
    param_loop -> param_classes;
    param_classes -> reg_alloc [label="根据类型"];
    reg_alloc -> update_stack -> param_loop [label="下一个参数"];
    param_loop -> final_adjust [label="处理完成"];

    setup_auto -> auto_ret -> auto_param_loop;
    auto_param_loop -> auto_reg_check;
    auto_reg_check -> auto_param_loop [label="下一个参数"];
    auto_param_loop -> final_adjust [label="处理完成"];

    final_adjust -> return;
}
