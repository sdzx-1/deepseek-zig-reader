
digraph DecoderFlow {
    node [shape=rectangle, style=rounded];

    start [label="开始 Decoder.init()"];
    deinit [label="调用 deinit() 释放资源"];
    reader [label="创建 Reader (reader())"];
    read_start [label="进入 read() 函数"];
    check_unread [label="检查未读数据长度 (unread_len)"];
    copy_data [label="复制数据到输出缓冲区"];
    return_n [label="返回读取的字节数 (n)"];
    check_err [label="检查错误状态 (self.err)"];
    handle_err [label="处理错误: 返回错误或0"];
    reset_buffer [label="清空缓冲区并重置 read_pos"];
    read_block [label="调用 readBlock()"];
    read_block_start [label="进入 readBlock()"];
    block_counter [label="创建 countingReader (block_counter)"];
    header_hasher [label="创建 hashedReader 校验头"];
    read_header_size [label="读取头部大小 (header_size)"];
    check_header_size [label="header_size == 0?"];
    end_stream [label="返回 EndOfStreamWithNoError"];
    parse_flags [label="解析 Flags 结构"];
    check_filter_count [label="filter_count > 1?"];
    unsupported_filter [label="返回 Unsupported 错误"];
    read_packed_size [label="读取 packed_size (LEB128)"];
    read_unpacked_size [label="读取 unpacked_size (LEB128)"];
    check_filter_id [label="验证 FilterId 是否为 LZMA2"];
    invalid_filter [label="返回 Unsupported 或 CorruptInput"];
    read_properties [label="读取 properties_size 并验证"];
    check_header_padding [label="验证头部填充字节为0"];
    verify_header_hash [label="校验头部哈希值"];
    hash_mismatch_header [label="返回 WrongChecksum"];
    decompress_data [label="调用 lzma2.decompress() 解压数据"];
    verify_packed_size [label="验证 packed_size 匹配"];
    size_mismatch [label="返回 CorruptInput"];
    verify_unpacked_size [label="验证 unpacked_size 匹配"];
    check_block_padding [label="验证块填充字节为0"];
    check_type [label="根据 self.check 选择校验方式"];
    verify_crc32 [label="计算并验证 CRC32"];
    verify_crc64 [label="计算并验证 CRC64"];
    verify_sha256 [label="计算并验证 SHA256"];
    check_hash_match [label="哈希值是否匹配?"];
    hash_mismatch [label="返回 WrongChecksum"];
    increment_block [label="block_count += 1"];
    return_void [label="返回成功"];

    start -> reader;
    reader -> read_start [label="调用 reader()"];
    read_start -> check_unread;
    check_unread -> copy_data [label="unread_len > 0"];
    copy_data -> return_n;
    check_unread -> check_err [label="unread_len == 0"];
    check_err -> handle_err [label="self.err != null"];
    handle_err -> return_n [label="返回错误或0"];
    check_err -> reset_buffer [label="self.err == null"];
    reset_buffer -> read_block;
    read_block -> read_block_start [label="进入 readBlock()"];
    read_block_start -> block_counter;
    block_counter -> header_hasher;
    header_hasher -> read_header_size;
    read_header_size -> check_header_size;
    check_header_size -> end_stream [label="是"];
    check_header_size -> parse_flags [label="否"];
    parse_flags -> check_filter_count;
    check_filter_count -> unsupported_filter [label="是"];
    check_filter_count -> read_packed_size [label="否"];
    read_packed_size -> read_unpacked_size;
    read_unpacked_size -> check_filter_id;
    check_filter_id -> invalid_filter [label="不符合条件"];
    check_filter_id -> read_properties [label="符合条件"];
    read_properties -> check_header_padding;
    check_header_padding -> verify_header_hash;
    verify_header_hash -> hash_mismatch_header [label="哈希不匹配"];
    verify_header_hash -> decompress_data [label="哈希匹配"];
    decompress_data -> verify_packed_size;
    verify_packed_size -> size_mismatch [label="不匹配"];
    verify_packed_size -> verify_unpacked_size [label="匹配"];
    verify_unpacked_size -> check_block_padding [label="继续"];
    check_block_padding -> check_type;
    check_type -> verify_crc32 [label="check == crc32"];
    check_type -> verify_crc64 [label="check == crc64"];
    check_type -> verify_sha256 [label="check == sha256"];
    verify_crc32 -> check_hash_match;
    verify_crc64 -> check_hash_match;
    verify_sha256 -> check_hash_match;
    check_hash_match -> hash_mismatch [label="不匹配"];
    check_hash_match -> increment_block [label="匹配"];
    increment_block -> return_void;
    return_void -> read_start [label="继续循环"];
    deinit [shape=ellipse];
    start -> deinit [label="调用 deinit() 时", style=dashed];
}
