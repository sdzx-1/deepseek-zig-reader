
digraph computeHash {
    node [shape=rectangle, style=rounded];
    start [shape=ellipse, label="开始"];
    end [shape=ellipse, label="返回结果或错误"];
    
    subgraph cluster_init {
        label="初始化";
        init_vars [label="初始化变量:\narena, gpa, eb, thread_pool, root_dir"];
        create_lists [label="创建动态数组:\nall_files, deleted_files, sus_dirs"];
        init_walker [label="初始化目录遍历器 walker"];
        total_size_init [label="初始化 total_size = 0"];
    }
    
    subgraph cluster_walk {
        label="遍历目录";
        walk_loop [label="循环遍历每个文件/目录"];
        check_entry [label="条目类型判断", shape=diamond];
        handle_deleted [label="标记为删除\n记录父目录到 sus_dirs\n启动删除线程"];
        handle_included [label="检查文件类型\n创建 HashedFile\n启动哈希线程"];
        entry_directory [label="目录? → 跳过"];
        entry_filter [label="是否包含在过滤器中?", shape=diamond];
        entry_type_check [label="检查文件类型合法性", shape=diamond];
    }
    
    subgraph cluster_post_walk {
        label="后处理";
        sort_sus_dirs [label="按路径长度降序排序 sus_dirs"];
        delete_dirs_loop [label="循环尝试删除可疑目录"];
        sort_files [label="对 all_files 进行排序"];
        hash_processing [label="收集哈希结果\n累加 total_size"];
        check_errors [label="检查错误", shape=diamond];
        dump_debug [label="调试模式输出哈希信息"];
    }
    
    start -> init_vars;
    init_vars -> create_lists;
    create_lists -> init_walker;
    init_walker -> total_size_init;
    total_size_init -> walk_loop;
    
    walk_loop -> check_entry;
    check_entry -> entry_directory [label="是目录"];
    entry_directory -> walk_loop;
    check_entry -> entry_filter [label="非目录"];
    entry_filter -> handle_deleted [label="不包含"];
    entry_filter -> entry_type_check [label="包含"];
    
    handle_deleted -> sus_dirs_put [label="记录父目录"];
    sus_dirs_put -> spawn_delete [label="启动删除线程"];
    spawn_delete -> walk_loop;
    
    entry_type_check -> handle_included [label="合法"];
    entry_type_check -> add_error [label="非法文件类型"];
    add_error -> end [label="返回 FetchFailed"];
    
    handle_included -> check_build_zig [label="标记 build.zig"];
    check_build_zig -> spawn_hash [label="启动哈希线程"];
    spawn_hash -> walk_loop;
    
    walk_loop -> sort_sus_dirs [label="遍历完成"];
    
    sort_sus_dirs -> delete_dirs_loop;
    delete_dirs_loop -> check_dir_empty [label="尝试删除目录"];
    check_dir_empty -> add_parent [label="删除成功\n记录父目录"];
    add_parent -> delete_dirs_loop;
    check_dir_empty -> delete_dirs_loop [label="目录非空或不存在"];
    
    delete_dirs_loop -> sort_files;
    sort_files -> hash_processing;
    
    hash_processing -> check_errors;
    check_errors -> dump_debug [label="无错误且调试模式"];
    check_errors -> end [label="无错误"];
    check_errors -> end [label="有错误 → FetchFailed"];
    
    dump_debug -> end;
    
    // 错误处理分支
    edge [color=red];
    walk_loop -> walk_error [label="遍历出错"];
    walk_error -> add_error_msg [label="记录错误信息"];
    add_error_msg -> end [label="返回 FetchFailed"];
    
    delete_dirs_loop -> delete_error [label="删除出错"];
    delete_error -> add_dir_error [label="记录错误信息"];
    add_dir_error -> end [label="返回 FetchFailed"];
}
