
digraph zigProcessUpdate {
    node [shape=rectangle, fontname="Courier", fontsize=10];
    edge [fontname="Courier", fontsize=10];

    start [label="开始", shape=ellipse];
    init_vars [label="初始化变量\nb = s.owner\narena = b.allocator\ntimer启动"];
    send_messages [label="发送消息到子进程stdin\n发送.update消息\n若非watch模式发送.exit"];
    poll_loop [label="进入poll循环", shape=diamond];
    check_header [label="检查stdout可读长度\n是否足够读取Header"];
    read_header [label="读取Header结构"];
    check_body [label="检查stdout可读长度\n是否足够读取body"];
    read_body [label="读取body数据"];
    process_message [label="处理消息类型", shape=diamond];
    zig_version [label="版本检查\n比较builtin版本与body内容"];
    error_bundle [label="处理错误包\n记录到s.result_error_bundle"];
    emit_digest [label="生成emit摘要\n设置result路径"];
    file_system_inputs [label="处理文件系统输入\n清理并添加watch输入"];
    other_message [label="忽略其他消息类型"];
    discard_body [label="丢弃已处理的body数据"];
    poll_continue [label="继续poll循环", shape=diamond];
    end_loop [label="退出poll循环"];
    handle_stderr [label="处理stderr内容\n追加到错误消息"];
    return_result [label="返回result路径", shape=ellipse];
    error_exit [label="返回错误", shape=ellipse];

    start -> init_vars;
    init_vars -> send_messages;
    send_messages -> poll_loop;

    poll_loop -> check_header [label="进入循环"];
    check_header -> poll_loop [label="长度不足且poll失败"];
    check_header -> read_header [label="长度足够"];
    read_header -> check_body;
    check_body -> poll_loop [label="长度不足且poll失败"];
    check_body -> read_body [label="长度足够"];
    read_body -> process_message;

    process_message -> zig_version [label=".zig_version"];
    process_message -> error_bundle [label=".error_bundle"];
    process_message -> emit_digest [label=".emit_digest"];
    process_message -> file_system_inputs [label=".file_system_inputs"];
    process_message -> other_message [label="其他类型"];

    zig_version -> error_exit [label="版本不匹配"];
    zig_version -> discard_body [label="版本匹配"];

    error_bundle -> discard_body [label="处理完成"];
    error_bundle -> error_exit [label="错误处理失败"];

    emit_digest -> discard_body;
    file_system_inputs -> discard_body;
    other_message -> discard_body;

    discard_body -> poll_continue;
    poll_continue -> poll_loop [label="继续循环"];
    poll_continue -> end_loop [label="退出循环"];

    end_loop -> handle_stderr;
    handle_stderr -> return_result;
}
