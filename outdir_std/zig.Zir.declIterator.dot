
digraph flowchart {
    node [shape=rectangle fontname="Courier" fontsize=12];
    edge [fontname="Courier" fontsize=10];

    start [label="Start: declIterator(zir, decl_inst)"];
    get_inst [label="inst = zir.instructions.get(decl_inst)"];
    check_extended [label="assert(inst.tag == .extended)" shape=diamond];
    get_opcode [label="extended = inst.data.extended"];
    switch_opcode [label="switch (extended.opcode)" shape=diamond];

    // StructDecl分支
    struct_decl [label="case .struct_decl"];
    struct_cast [label="small = @bitCast(extended.small)"];
    struct_init_index [label="extra_index = extended.operand + struct_fields_len"];
    struct_captures [label="has_captures_len?" shape=diamond];
    struct_get_captures [label="captures_len = zir.extra[extra_index++]\nextra_index += has_fields_len"];
    struct_decls_len [label="has_decls_len?" shape=diamond];
    struct_get_decls [label="decls_len = zir.extra[extra_index++]"];
    struct_captures_skip [label="extra_index += captures_len*2"];
    struct_backing_int [label="has_backing_int?" shape=diamond];
    struct_handle_backing [label="backing_int_body_len = zir.extra[extra_index++]\nif body_len=0: extra_index++\nelse: extra_index += body_len"];
    struct_return [label="Return DeclIterator"];

    // EnumDecl分支
    enum_decl [label="case .enum_decl"];
    enum_cast [label="small = @bitCast(extended.small)"];
    enum_init_index [label="extra_index = extended.operand + enum_fields_len"];
    enum_skip_flags [label="extra_index += has_tag_type + has_body_len + has_fields_len"];
    enum_captures [label="has_captures_len?" shape=diamond];
    enum_get_captures [label="captures_len = zir.extra[extra_index++]"];
    enum_decls_len [label="has_decls_len?" shape=diamond];
    enum_get_decls [label="decls_len = zir.extra[extra_index++]"];
    enum_captures_skip [label="extra_index += captures_len*2"];
    enum_return [label="Return DeclIterator"];

    // UnionDecl分支（与Enum类似）
    union_decl [label="case .union_decl"];
    union_cast [label="small = @bitCast(extended.small)"];
    union_init_index [label="extra_index = extended.operand + union_fields_len"];
    union_skip_flags [label="extra_index += has_tag_type + has_body_len + has_fields_len"];
    union_captures [label="has_captures_len?" shape=diamond];
    union_get_captures [label="captures_len = zir.extra[extra_index++]"];
    union_decls_len [label="has_decls_len?" shape=diamond];
    union_get_decls [label="decls_len = zir.extra[extra_index++]"];
    union_captures_skip [label="extra_index += captures_len*2"];
    union_return [label="Return DeclIterator"];

    // OpaqueDecl分支
    opaque_decl [label="case .opaque_decl"];
    opaque_cast [label="small = @bitCast(extended.small)"];
    opaque_init_index [label="extra_index = extended.operand + opaque_fields_len"];
    opaque_decls_len [label="has_decls_len?" shape=diamond];
    opaque_get_decls [label="decls_len = zir.extra[extra_index++]"];
    opaque_captures [label="has_captures_len?" shape=diamond];
    opaque_get_captures [label="captures_len = zir.extra[extra_index++]"];
    opaque_captures_skip [label="extra_index += captures_len*2"];
    opaque_return [label="Return DeclIterator"];

    // 其他情况
    else_case [label="default: unreachable"];

    // 连接节点
    start -> get_inst -> check_extended -> get_opcode -> switch_opcode;
    
    switch_opcode -> struct_decl [label=".struct_decl"];
    struct_decl -> struct_cast -> struct_init_index -> struct_captures;
    struct_captures -> struct_get_captures [label="yes"];
    struct_captures -> struct_decls_len [label="no"];
    struct_get_captures -> struct_decls_len;
    struct_decls_len -> struct_get_decls [label="yes"];
    struct_decls_len -> struct_captures_skip [label="no"];
    struct_get_decls -> struct_captures_skip;
    struct_captures_skip -> struct_backing_int;
    struct_backing_int -> struct_handle_backing [label="yes"];
    struct_backing_int -> struct_return [label="no"];
    struct_handle_backing -> struct_return;

    switch_opcode -> enum_decl [label=".enum_decl"];
    enum_decl -> enum_cast -> enum_init_index -> enum_skip_flags -> enum_captures;
    enum_captures -> enum_get_captures [label="yes"];
    enum_captures -> enum_decls_len [label="no"];
    enum_get_captures -> enum_decls_len;
    enum_decls_len -> enum_get_decls [label="yes"];
    enum_decls_len -> enum_captures_skip [label="no"];
    enum_get_decls -> enum_captures_skip -> enum_return;

    switch_opcode -> union_decl [label=".union_decl"];
    union_decl -> union_cast -> union_init_index -> union_skip_flags -> union_captures;
    union_captures -> union_get_captures [label="yes"];
    union_captures -> union_decls_len [label="no"];
    union_get_captures -> union_decls_len;
    union_decls_len -> union_get_decls [label="yes"];
    union_decls_len -> union_captures_skip [label="no"];
    union_get_decls -> union_captures_skip -> union_return;

    switch_opcode -> opaque_decl [label=".opaque_decl"];
    opaque_decl -> opaque_cast -> opaque_init_index -> opaque_decls_len;
    opaque_decls_len -> opaque_get_decls [label="yes"];
    opaque_decls_len -> opaque_captures [label="no"];
    opaque_get_decls -> opaque_captures;
    opaque_captures -> opaque_get_captures [label="yes"];
    opaque_captures -> opaque_captures_skip [label="no"];
    opaque_get_captures -> opaque_captures_skip -> opaque_return;

    switch_opcode -> else_case;
    
    // 合并返回节点
    struct_return -> end;
    enum_return -> end;
    union_return -> end;
    opaque_return -> end;
    else_case -> end [style=invis];

    end [label="End" shape=doublecircle];
}
