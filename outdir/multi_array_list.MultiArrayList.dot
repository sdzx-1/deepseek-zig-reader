
digraph MultiArrayList {
    rankdir=TB;
    node [shape=rectangle, style="rounded", fontname="Arial"];

    start [label="MultiArrayList(T)"];
    init [label="初始化结构体\n包含bytes, len, capacity"];
    deinit [label="deinit\n释放内存"];
    append [label="append\n确保容量后添加元素"];
    insert [label="insert\n插入元素并移动后续元素"];
    remove [label="swapRemove/orderedRemove\n删除元素"];
    sort [label="sort/sortUnstable\n排序元素"];
    slice [label="slice\n获取字段指针切片"];
    clone [label="clone\n复制列表"];
    resize [label="resize\n调整列表长度"];
    set_capacity [label="setCapacity\n设置新容量并复制数据"];

    start -> init;
    init -> deinit [label="释放内存时调用"];
    init -> append [label="添加元素"];
    init -> insert [label="插入元素"];
    init -> remove [label="删除元素"];
    init -> sort [label="排序"];
    init -> slice [label="获取切片"];
    init -> clone [label="克隆列表"];
    init -> resize [label="调整长度"];
    init -> set_capacity [label="容量不足时"];

    append -> ensureTotalCapacity [label="检查容量"];
    ensureTotalCapacity -> set_capacity [label="需要扩容时"];
    set_capacity -> clone [label="复制数据"];

    insert -> ensureUnusedCapacity [label="检查容量"];
    ensureUnusedCapacity -> ensureTotalCapacity [label="容量不足"];
    insert -> insertAssumeCapacity [label="执行插入"];

    sort -> sortInternal [label="调用排序逻辑"];
    sortInternal -> swap_elements [label="交换元素位置"];

    slice -> items [label="获取字段数组"];
    items -> field_pointers [label="指针转换"];

    clone -> ensureTotalCapacity [label="分配新内存"];
    clone -> copy_data [label="复制所有字段数据"];

    resize -> ensureTotalCapacity [label="容量调整"];
    resize -> update_length [label="设置新长度"];

    // 隐藏节点用于布局优化
    {rank=same; append; insert; remove}
    {rank=same; sort; clone}
}
