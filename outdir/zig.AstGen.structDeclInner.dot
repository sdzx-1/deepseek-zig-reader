
digraph flowchart {
    node [shape=rectangle, style="rounded", fontname="Arial"];
    edge [fontname="Arial"];

    start [label="开始 structDeclInner"];
    check_tuple [label="检查是否为元组结构体"];
    is_tuple [label="遍历成员查找元组字段"];
    handle_root_tuple [label="node是根节点？"];
    fail_root_tuple [label="报错：文件不能是元组"];
    call_tupleDecl [label="调用 tupleDecl 处理元组"];
    empty_struct [label="成员数为0且无后备类型？"];
    create_empty_struct [label="生成空结构体指令并返回"];
    init_namespace [label="初始化命名空间和作用域块"];
    handle_backing_int [label="处理后备整数类型"];
    check_packed [label="布局是否为packed？"];
    fail_non_packed [label="报错：非packed不支持后备类型"];
    process_backing_int [label="生成后备类型表达式"];
    scan_members [label="扫描容器成员，统计声明和字段数"];
    init_wip_members [label="初始化 WipMembers"];
    loop_members [label="遍历每个成员节点"];
    handle_member [label="处理成员类型/对齐/初始值"];
    collect_flags [label="收集已知标志（如comptime字段等）"];
    build_struct [label="构建结构体ZIR指令"];
    write_extra_data [label="将数据写入astgen.extra"];
    return_inst [label="返回指令引用"];

    start -> check_tuple;
    check_tuple -> is_tuple;
    is_tuple -> handle_root_tuple [label="找到元组字段"];
    is_tuple -> empty_struct [label="未找到，继续"];

    handle_root_tuple -> fail_root_tuple [label="是根节点"];
    handle_root_tuple -> call_tupleDecl [label="非根节点"];
    fail_root_tuple -> return_inst;
    call_tupleDecl -> return_inst;

    empty_struct -> create_empty_struct [label="是"];
    empty_struct -> init_namespace [label="否"];

    init_namespace -> handle_backing_int;
    handle_backing_int -> check_packed [label="存在后备节点"];
    check_packed -> fail_non_packed [label="非packed"];
    check_packed -> process_backing_int [label="是packed"];
    process_backing_int -> scan_members;
    fail_non_packed -> return_inst;

    scan_members -> init_wip_members;
    init_wip_members -> loop_members;
    loop_members -> handle_member [label="下一个成员"];
    handle_member -> collect_flags;
    collect_flags -> loop_members [label="继续循环"];
    loop_members -> build_struct [label="所有成员处理完毕"];

    build_struct -> write_extra_data;
    write_extra_data -> return_inst;

    create_empty_struct -> return_inst;
}
