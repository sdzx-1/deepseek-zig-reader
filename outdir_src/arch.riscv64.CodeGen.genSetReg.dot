
digraph flowchart {
    node [shape=rectangle, fontname="Courier", fontsize=10];
    edge [fontname="Courier", fontsize=10];

    start [label="genSetReg(func, ty, reg, src_mcv)"];
    check_abi_size [label="检查abi_size是否超过max_size"];
    panic [label="panic"];
    switch_src_mcv [label="根据src_mcv类型分支"];
    undef_case [label="src_mcv是.undef"];
    immediate_case [label="src_mcv是.immediate"];
    register_case [label="src_mcv是.register"];
    load_frame_case [label="src_mcv是.load_frame"];
    memory_case [label="src_mcv是.memory"];
    indirect_case [label="src_mcv是.indirect"];
    other_cases [label="其他情况（如.register_pair, lea_frame等）"];
    end [label="返回"];

    start -> check_abi_size;
    check_abi_size -> panic [label="abi_size > max_size"];
    check_abi_size -> switch_src_mcv [label="abi_size <= max_size"];

    switch_src_mcv -> undef_case [label=".undef"];
    switch_src_mcv -> immediate_case [label=".immediate"];
    switch_src_mcv -> register_case [label=".register"];
    switch_src_mcv -> load_frame_case [label=".load_frame"];
    switch_src_mcv -> memory_case [label=".memory"];
    switch_src_mcv -> indirect_case [label=".indirect"];
    switch_src_mcv -> other_cases [label="其他类型"];

    undef_case -> gen_imm_1 [label="abi_size=1\n生成0xAA"];
    undef_case -> gen_imm_2 [label="abi_size=2\n生成0xAAAA"];
    undef_case -> gen_imm_4 [label="abi_size=3-4\n生成0xAAAAAAAA"];
    undef_case -> gen_imm_8 [label="abi_size=5-8\n生成0xAAAAAAAAAAAAAAAA"];
    gen_imm_1 -> end;
    gen_imm_2 -> end;
    gen_imm_4 -> end;
    gen_imm_8 -> end;

    immediate_case -> check_x_range [label="处理立即数"];
    check_x_range -> addi [label="i12范围内"];
    check_x_range -> lui_addi [label="i32范围内"];
    check_x_range -> advanced_seq [label="更大数值"];
    addi -> end;
    lui_addi -> end;
    advanced_seq -> end;

    register_case -> check_same_reg [label="src_reg.id() == reg.id()?"];
    check_same_reg -> end [label="是"];
    check_same_reg -> vector_handling [label="否且src_reg是向量"];
    vector_handling -> set_vl [label="设置VSEW/VLMUL"];
    set_vl -> pseudo_mv [label="生成mv指令"];
    pseudo_mv -> end;

    load_frame_case -> check_reg_class [label="reg是向量?"];
    check_reg_class -> alloc_addr_reg [label="是"];
    alloc_addr_reg -> gen_copy_addr [label="复制地址到addr_reg"];
    gen_copy_addr -> gen_indirect_load [label="间接加载"];
    check_reg_class -> pseudo_load_rm [label="否，直接生成load指令"];
    gen_indirect_load -> end;
    pseudo_load_rm -> end;

    memory_case -> gen_set_addr [label="设置地址到reg"];
    gen_set_addr -> load_inst [label="生成ld指令"];
    load_inst -> end;

    indirect_case -> select_load_tag [label="根据类型选择load指令"];
    select_load_tag -> generate_load [label="生成对应load指令"];
    generate_load -> end;

    other_cases -> handle_specific [label="处理特定类型"];
    handle_specific -> end;

    panic -> end [label="终止"];
}
