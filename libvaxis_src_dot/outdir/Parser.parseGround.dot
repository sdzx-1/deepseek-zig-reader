
digraph parseGround {
    node [shape=rectangle, fontname="Courier"];
    start [label="开始: parseGround"];
    assert_input [label="断言 input.len > 0"];
    read_b [label="读取 b = input[0]\n初始化 n = 1"];
    switch_b [label="根据 b 的值选择分支"];
    case_00 [label="b = 0x00\n设置 Key.codepoint = '@', .ctrl = true"];
    case_08 [label="b = 0x08\n设置 Key.codepoint = Backspace"];
    case_09 [label="b = 0x09\n设置 Key.codepoint = Tab"];
    case_0A [label="b = 0x0A\n设置 Key.codepoint = 'j', .ctrl = true"];
    case_0D [label="b = 0x0D\n设置 Key.codepoint = Enter"];
    case_01_1A [label="b ∈ 0x01-0x07, 0x0B-0x0C, 0x0E-0x1A\n设置 Key.codepoint = b + 0x60, .ctrl = true"];
    case_1B [label="b = 0x1B\n断言 input.len == 1\n设置 Key.codepoint = Escape"];
    case_7F [label="b = 0x7F\n设置 Key.codepoint = Backspace"];
    else_block [label="进入 else 分支\n初始化码点迭代器"];
    check_valid_cp [label="获取下一个码点 cp\n无效则返回 error"];
    set_code [label="设置 code = cp.code\nn = cp.len"];
    grapheme_loop [label="循环检查后续码点\n更新 code = MULTICODEPOINT\n累加 n"];
    return_result [label="返回 { .event.key_press = key, .n = n }"];
    end [label="结束"];

    start -> assert_input;
    assert_input -> read_b;
    read_b -> switch_b;

    switch_b -> case_00 [label="0x00"];
    switch_b -> case_08 [label="0x08"];
    switch_b -> case_09 [label="0x09"];
    switch_b -> case_0A [label="0x0A"];
    switch_b -> case_0D [label="0x0D"];
    switch_b -> case_01_1A [label="0x01-0x1A"];
    switch_b -> case_1B [label="0x1B"];
    switch_b -> case_7F [label="0x7F"];
    switch_b -> else_block [label="其他"];

    case_00 -> return_result;
    case_08 -> return_result;
    case_09 -> return_result;
    case_0A -> return_result;
    case_0D -> return_result;
    case_01_1A -> return_result;
    case_1B -> return_result;
    case_7F -> return_result;

    else_block -> check_valid_cp;
    check_valid_cp -> set_code [label="有效"];
    check_valid_cp -> end [label="无效", color=red];
    set_code -> grapheme_loop;
    grapheme_loop -> grapheme_loop [label="继续迭代"];
    grapheme_loop -> return_result [label="结束循环"];

    return_result -> end;
}
